<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="ws" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Presenting Batch Client Application Example</title>
</head>

<body onload="createToc();highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Presenting Batch Client Application Example</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>

<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article presents an example of batch, a client application based on Java classes, to consume 3DSpace web services. The first chapter presents the Java class architecture, and explains what you have to do to create your own batch. The second introduces the Java classes, provided by CAA, the batch relies on.</p>
		<p>The batch used to experience 3DSpace web services [<a href="#References">1</a>] is based
		on this batch infrastructure. </p>
		<div id="toc"></div>
		</td>
	</tr>
</table>

<!-- ========== ==========  ========== ========== ========== ========== ========== -->
<h2><a name="Presentation"></a>Java Class Architecture</h2>
<p>A Java client application is a Java application that <b>communicates</b> with a server.
</p>
<p>3DSpace available on-premises, or as a Cloud Saas solution, provides web services to client applications.
Consequently the term <b>Java client application</b> refers to a Java application that consumes web services (here 3DSpace web services).
</p>
<p>Below is a scheme of how a <b>Java client application</b> should be structured:
</p>
<table>
    <caption><a name="Fig1"></a>Fig.1 Client Application Architecture</caption>
	<tr>
		<td><img alt="mkmk-g" src="images/CAAJavaClientAppArchi.png"/></td>
	</tr>
</table>
 
<p>A <b>Java client application</b> can be divided into graded layers. Each layer is made of logical components which are implemented by <b>Java classes</b>. From top down:</p>
<ul>
<li><b>The application layer</b>
<p>The <code>Application</code> box represents the main java class. It starts by calling the <code>CAAi3dxLoginClient</code> component to perform the 3DPassport login, and finally for the logout. Between it can call as many <code>Specific client</code> components (blue boxes) as 3DSpace web services to consume. </p>
</li>
<li><b>The Client Classes layer</b>
<p>Each <code>Specific client</code> component is a Java class dedicated for one (or more) web service. It contains the format and the logic of these web service(s). It sends order to the <code>CAAURLLoader</code> component to execute the appropriate HTTP Request(s). Finally when the  <code>CAAURLLoader</code> component sends back the backend response, the <code>Specific client</code>  can proceeded it, or it can send it as a "raw" response to the <code>Application</code> main class.</p>
<p>The <code>CAAi3dxLoginClient</code> component is the <code>Specific client</code> component dedicated to the 3DPassport web services. It can perfom an authentication to the <b>3D</b>EXPERIENCE platform using a login and password passed as argument of the batch, and it can perform a logout.</p>  
<p>The <code>CAAi3dxClient</code> component - created by the application component - is an "helper" class. It 
creates and holds the unique <code>CAAURLLoader</code> class instance, and it keeps the batch input data as the 3DSpace, 3DPassport URL.
 Each <code>Specific client</code> component keeps a pointer to the
<code>CAASwymClient</code> component instance.</p> 
</li>
<li><b>The URL Loader layer</b>
<p>The <code>CAAURLLoader</code> class loads URL and catches response based on <code>HttpsUrlConnection</code> class. The latter is a class from <code>javax.net.ssl</code> package.</p>
</li>
</ul>
<p>If you want to create such a Java client application you can use the CAA classes (the orange dashed boxes on the shema) provided by the <i>CAAi3DXWebServicesClient.edu</i> framework. An example is detailed through two use cases: </p> 
<ul>
<li>"Creating Java Based Application Class" [<a href="#References">2</a>] details the main class creation, and how to launch the application.
<li>"Creating Java Based Specific Client Class" [<a href="#References">3</a>] is only focused to the
specific class creation. </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ==================== ========== ========== ========== ========== -->
<h2><a name="Client"></a>CAA Java Classes</h2>
<p>The build of the <i>CAAi3DXWebServicesClient.edu</i> framework, located in the CAADoc folder of the API CD-ROM, generates <i>CAAi3DXJavaClient.jar</i>. This Java library contains the definition of three classes stored in the <i>com.dassault_systemes.caasamples.i3dxsamples</i> package. This section introduces them.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="CAAi3dxClient"></a>CAAi3dxClient Class</h3>
<p>All common tools to <code>Specific client</code> classes have been grouped into a single <code>CAAi3dxClient</code> class. This class is usually instantiated in the main application class, and passed as input of the specific class instances.</p>
<p>The <code>CAAi3dxClient</code> class is composed as follows:
</p>
<pre class="code">
public class <b>CAAi3dxClient</b>
{
    public final static String <b>ENCODING</b> = "UTF-8";

    private static CAAURLLoader _URL_loader = null; 
    private String _space3ds_URL            = null; 
    private String _pass3ds_URL             = null; 
    private String _output_dir              = null; 
    private String _tenant                  = null; 
	 
    public <b>CAAi3dxClient</b>(String space3ds_URL, String pass3ds_URL, 
        String output_dir, String tenant){
        ...
    }
    public CAAURLLoader <b>getURLLoader</b>() {
        return _URL_loader;
    }
    public String <b>get3DSpaceServer</b>() {
        return _space3ds_URL ;
    }
    public String getPassportServer() {
        return _pass3ds_URL ;
    }
    public String <b>getOut</b>() {
        return _output_dir;
    }
    public String getTenant() {
        return _tenant ;
    }
    public static final JsonObject <b>getJSON</b>(byte[] b) throws Exception {
        ...
    }
</pre>

<h4>ENCODING</h4>
<p>Encoding is always  "UTF-8".
This attribute is public and used as default encoding format whenever requires it.
For example it is used to encode URLs during login (for avoiding malformed URL expressions).
</p>
<h4><a name="clientconst"></a>Constructor</h4>
<p>The default constructor takes as input parameters:
</p>
<ul>
	<li>The 3DPassport URL,
	 <li>The 3DSpace URL, </li>
	<li>The output directory for trace files (e.g. C:/documents/).</li>
</ul>
<p>The constructor builds the <code>CAAURLLoader</code> instance (named <code>_URL_loader</code>) used to load URLs. This instance 
must be unique all along the <b>3D</b>EXPERIENCE session since <code>CAAURLLoader</code> stores session Cookies (see <a href="#CookieMngt">Manage Cookies</a>). To keep the same session over several <code>Specific client</code> the <code>_URL_loader</code> is declared <b>static</b>.
</p>
<h4><em>getJSON</em></h4>
<p><em>getJSON</em> is a method to parse a byte array to a standard <code>JsonObject</code> java object for JSON manipulation.
It is used by <code>Specific clients</code> to transform the raw output of a request into a more usable object.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="CAAi3dxLoginClient"></a>CAAi3dxLoginClient Class</h3>
<p>The <b>3D</b>EXPERIENCE platform requires an <b>authentification</b> before using its services. So the first thing before consuming a 3DSpace web service is to perform a <b>login</b>. The final 
step of the batch is to perfom a logout. Both are made with the 3DPassport CAS API. The login, as the logout, are encapsulated by <i>CAAi3dxLoginClient</i> class, an example of specific client class.</p>
<p>The CAS <a href="samples/CAALogin.traces.txt">login</a> consists in to perform two web services consecutively:</p>
<ul>
<li>(GET)  <a href="../CAAiamPassportRef/CAAiamPassportAPILoginTicket.htm">$3DPassportURL/login?action=get_auth_params</a>  , to get the CAS login ticket (lt). </li>
<li>(POST) <a href="../CAAiamPassportRef/CAAiamPassportAPIAuthentication.htm">$3DPassportURL/login</a>?service=$3DSpaceURL + "?tenant=" +  _client.getTenant()  , 
with the lt, the login and the password in the POST BODY
<p>If there is no value for the tenant (which is a batch input), the tenant query parameter is not appended to the service URL. For on premises, the tenant can
be omitted (or it is OnPremise), bur for cloud it is mandatory.</p></li>
</ul>
<p>The CAS <a href="samples/CAALogout.traces.txt">logout</a> consists in  to perform 
(GET)  <a href="../CAAiamPassportRef/CAAiamPassportAPILogout.htm">$3DPassportURL/logout</a>. </p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h3><a name="CAAURLLoader"></a>CAAURLLoader Class</h3>
<p><em>Consuming a web service</em> is equivalent to <em>load an URL</em> (sometimes the term <em>call an API</em> is preferred). 
They all refer to the same action of firing an HTTPS request to a server and catching the response.
</p>
<p>To do this we rely on a <code>HttpsUrlConnection</code> class that provides HTTPS request management.
</p>
<p>URL loading is handled by <code>CAAURLLoader</code> class. The main public methods to detail are: </p>
<ul>
<li><a href="#CAAURLLoader-const">The class constructor,</a></li>
<li><a href="#CAAURLLoader-SC">The method to set up the security context,</a></li>
<li><a href="#CAAURLLoader-loadUrl">The method to load an URL.</a></li>
<li><a href="#CAAURLLoader-response">The methods to retrieve information from the backend response.</a></li>
</ul>
<h4><a name="CAAURLLoader-const"></a>The class constructor</h5>
<p>The <i>constructor</i>  manages two things: the cookie, and the unique User agent. </p>
<pre class="code">
public CAAURLLoader() throws Exception {
    CookieHandler.setDefault( new CookieManager( ) );
    System.setProperty("http.agent", "CAA URL Loader");
}
</pre>
<p><a name="CookieMngt"></a><b>About the cookies</b></p>
<p>3DSpace and 3DPassport web services provider produces cookies as any web service providers. Those cookies must be managed. Four objects from java.net package ensure default cookie management: </p>
<ul>
<li>CookieManager</li>
<li>CookieHandler</li>
<li>CookieStore</li>
<li>CookiePolicy</li>
</ul>
<p>Extract from the Java documentation [<a href="#References">5</a>]:</p>
<p>"<em><code>CookieManager</code> provides a concrete implementation of <code>CookieHandler</code>,
which separates the storage of cookies from the policy surrounding accepting and rejecting cookies.
A <code>CookieManager</code> is initialized with a <code>CookieStore</code> which manages storage,
and a <code>CookiePolicy</code> object, which makes policy decisions on cookie acceptance/rejection. 
"</em>.</p>
<p>For 3DSpace and 3DPassport, the default <code>CookieStore</code> and <code>CookiePolicy</code> objects are used.</p>
<p>Cookies are set by <code>HttpsURLConnection</code>.
It is an intern Java process meaning that developer does not specify any link between <code>HttpsURLConnection</code> instance and the <code>CookieHandler</code>.
</p>
<h4><a name="CAAURLLoader-SC"></a>The method to set up the security context</h4>
<p>The method is <i>setSecurityContext</i> with the security context as a string in input. This method keeps
the input value (which can be null) in a class member. When the URL is fired on the server by <i>loadUrl</i>, the next explained method, the "SecurityContext" header field is added or not to the request 
according to the class member value. If  the SecurityContext header is passed, its value is UTF8 encoded.</p>
<p>This method is called by the specific client classes to set, or unset (with empty security context value), 
the security context.</p>
<h4><a name="CAAURLLoader-loadUrl"></a>The method to load an URL</h5>
<p>3DPassport supports GET and POST verbs, and 3DSpace supports GET, POST, PUT and DELETE and PATCH methods. For 
all verbs a BODY can be joined to the request. So 
<code>CAAURLLoader</code> exposes <i>loadUrl</i>, a method to be called by any specific client class (<a href="#Fig1">Fig.1</a>):</p>

<pre class="code">
public byte[] <b>loadUrl</b>(String urlAsString, String method, String content_type, byte[] body_data) throws Exception {
    1- <a href="#URLCreate">Create an URL class</a>
    2- <a href="#OpenConnection">Open the Connection</a> 
    3- <a href="#PATCH">Process PATCH verb</a>
    4- <a href="#RequestHeader">Set Request Header Fields</a> 
    5- <a href="#Postdata">Manage Body Data</a> 
    6- <a href="#Fire">Perform the Request</a> 
    7- <a href="#CatchingResponse">Catch the Response</a> 
    8- <a href="#Redirections">About redirections</a> 
    9- <a href="#ResponseHeader">Process Response Header</a> 
   10- <a href="#ResponseBody">Parse Response Body</a> 
}
</pre>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="URLCreate"></a>Step 1 - Create an URL class</h5>
<pre class="code">
URL url = new URL(urlAsString) ;
</pre>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="OpenConnection"></a>Step 2 - Open the Connection</h5>
<pre class="code">
HttpsURLConnection connection = (HttpsURLConnection) <b>url.openConnection()</b>;
connection.<b>setInstanceFollowRedirects(true)</b>;
connection.setConnectTimeout(15000);
...
</pre>
<p>It first creates an <code>HttpsURLConnection</code> object. It does not connect to server yet.
</p>
<p>HTTPS response can be a redirection to another URL (response code is 302).
For 3DSpace the application must perform automatic redirection <b>setInstanceFollowRedirects must be set to true</b>.
It means that while response code is 302 the <code>HttpsURLConnection</code> will load the redirection URL.
If too many redirection are performed an error will be raised to avoid infinite loop.
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="PATCH"></a>Step 3 - Process PATCH verb</h5>
<p>The PATCH verb is not nativelly supported by the <code>HttpsURLConnection</code> class. But there is a by-pass:</p>
<pre class="code">
if ( method.equals("PATCH") ) {
    connection.setRequestProperty("X-HTTP-Method-Override", "PATCH");
    connection.setRequestMethod("POST");
}else {
    connection.setRequestMethod(method);
}
</pre>
<p><em>setRequestMethod</em> tells the connection which method to use. Only GET/DELETE/POST/PUT are possible.</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="RequestHeader"></a>Step 4 - Set Request Header Fields</h5>
<p>There is at least the information about the expected response format. It is specified with the "Accept" header field. </p>
<pre class="code">
...
connection.setRequestProperty("Accept", "application/json");
...
</pre>
<p>JSON is the standard for all <b>3D</b>EXPERIENCE web services.</p>
<p>Moreover, for 3DSpace web services there is the  security context to manage.</p>
<pre class="code">
...
if(_SecurityContext != null &amp;&amp; (_SecurityContext.length() !=0) ) {
    connection.setRequestProperty("SecurityContext", <b>URLEncoder.encode(_SecurityContext,"UTF-8")</b>);
}
...
</pre>
<p><code>_SecurityContext</code> is the string kept by <a href="#CAAURLLoader-SC">setSecurityContext</a>. The value must be UTF8 encoded for a safe use.</p> 
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="Postdata"></a>Step 5 - Manage Body Data</h5>
<p>The body is the <code>body_data</code> argument. It can be a JSON or a FORM object 
passed as an array of bytes. Its real format is specified with the <code>content_type</code> 
argument. If there is no input body, the two <i>loadURL</i> arguments are null.</p>
<pre class="code">
...
if (body_data != null) {
    connection.<b>setDoOutput(true)</b>;
    connection.setRequestProperty("<b>Content-Length</b>", Integer.toString(body_data.length));    			
    connection.setRequestProperty("<b>Content-Type</b>", content_type);
    OutputStream output = connection.getOutputStream();
    output.<b>write</b>(body_data);
    output.flush();
    output.close();
}
...
</pre>
<p>First action is to tell the connection data is sent. 
Then the data type and length are specified in the request header.
And finally it writes the data to the output stream.
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="Fire"></a>Step 6 - Perform the request</h5>
<p>So far the connection does not have established any link to the server.
One way of doing that and of catching the response is to directly call the <em>getResponseCode</em> method from the <code>connection</code> object.
</p>
<pre class="code">
System.out.println("##SERVER RESPONSE ["+ connection.getResponseCode() +"] "+ ...
</pre>
</p>
<!-- ========== ==========  ========== ========== ========== ========== ========== -->
<h5><a name="CatchingResponse"></a>Step 7 - Catch the Response</h5>
<p>The <code>HttpsURLConnection</code> class exposes two methods to get the response body: one for the
successfull response, and one for the failure case. </p>  
</p>
<pre class="code">
...
InputStream input = null ;
//Error cases
if(connection.getResponseCode() != 200 && 
    connection.getResponseCode() != 201 && 
    connection.getResponseCode() != 204 ) {
    input = connection.<b>getErrorStream()</b>;
} else {
//Successful cases
    //DELETE no content
    if ( connection.getResponseCode() != 204 ) {
        input = <b>connection.getInputStream()</b>;
    }
}
...
</pre>
<p>The successful response codes are 200, 201 (creation), and 204 (delete). If another code is caught it means 
the request has failed.</p>
<p>The 204 code does not return a body. </p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="Redirections"></a>Step 8 - About redirections</h5>
<p>Because of automatic redirections the URL of the connection might have changed from its initial value. 
If so the new value is stored to a <code>_last_redirect_url</code> data member.</p>
<pre class="code">
...
if(! connection.getURL().toString().equals( url.toString() ) ){
    _last_redirect_url= connection.<b>getURL()</b>;
    System.out.println("");
    System.out.println("Has been redirected. Last Redirect URL : "+ _last_redirect_url);
}
...
</pre>
<p>It may have been redirected several times. 
This method, <i>getURL()</i>, gives only the <b>last URL</b> where the request have been redirected by following redirections.
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="ResponseHeader"></a>Step 9 - Process Response Header</h5>
<pre class="code">
...
for (int i = 1;; i++) {
    String header_name = connection.<b>getHeaderFieldKey(i)</b>;
    String header_value = connection.<b>getHeaderField(i)</b>;
    if (header_name == null &amp;&amp; header_value == null)
        break;
	else 
	    //display header field key name and its value 
		
    if ( header_name.equals("Content-Type") )
        <b>_content_type</b>= header_value;
    }
...
</pre>
<p>Only response "Content-Type" is stored to be retrieved by any specific client class to 
check the body format before using it. See <a href="#CAAURLLoader-response">The methods to retrieve information from the backend response</a> 
section.</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h5><a name="ResponseBody"></a>Step 10 - Parse Response Body</h5>
<p><em>loadUrl</em> method returns response body as a byte array.
</p>
<pre class="code">
...
byte[] io_buffer = null ;
if ( input != null ) {
    int read = 0;
    ByteArrayOutputStream ba = new ByteArrayOutputStream();
    <b>byte[] io_buffer</b> = new byte[0x10000];
    while ( ( read = input.<b>read</b>(io_buffer) ) >= 0 ) {
        if (read == 0) break;
        ba.<b>write</b>(io_buffer, 0, read);
    }
    io_buffer = ba.toByteArray();
}
<b>return io_buffer</b>;
</pre>
<p><code>io_buffer</code> is the value returned by  the <i>loadURL</i> method. It is created from
<code>input</code> the response stream  initialized in the <a href="#CatchingResponse">Step 7 - Catch the Response</a> step.</p>
<p>Reader may want to check Java ByteArrayOutputStream documentation to understand deeper how the response body is retrieved.
</p>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h4><a name="CAAURLLoader-response"></a>The methods to retrieve information from the backend response.</h4>
<p>The <i>loadURL</i> method returns the response body. But there are others information which can be extracted from the backend response. <i>loadURL</i> extracts them and sets up class members. These
information are accessible through the following public methods:</p>
<ul>
<li>int getResponseCode(), the backend status code.</li>
<li>String getContentTypeFromHeader(), the backend "Content-Type" header field. </li>
</ul> 
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="InShort"></a>In Short</h2>
<p>This article has shown how to develop in Java a client application to consume 3DSpace Web Services. The main class performs the login and the logout, and between, any 3DSpace API can be called. Each request to a server, 3DPassport for login and logout, or 3DSpace for collaborative space resources, is managed through a dedicated java class named client class. The client classes encapsulate the web service logic and format. They rely on infrastructure classes which eventually manage the HTTP request and its response.</p>
<p>Based on provided CAA Java classes, a new application consists in: </p>
<ul>
<li>Creating a new client class managing your 3DSpace web service logic [<a href="#References">2</a>]</li>
<li>Creating a new application class using this new client class, and re-using the CAA client class dedicated to 3DPassport actions [<a href="#References">3</a>]</li>
</ul> 
<p>The two references are use cases illustrating the purpose.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== -->
<h2><a name="References"></a>References</h2>
<table class="reference">
    <tr>
		<td>[1]</td>
		<td><a href="CAAi3DXTaScenarioJavaClientApp.htm">Experiencing 3DSpace Web Services</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td><a href="CAAi3DXUcGettingStarted.htm">Creating Java Based Client Application</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAi3DXUcJavaClientClass.htm">Creating Java Based Specific Client Class</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAi3DXTa3DSpaceWService.htm#Request-Hdrs">About 3DSpace Web Services</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="#" onclick="javascript:CAAlinkUrl(' http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html');return false;">CookieManager Class</a></td>
	</tr>
</table>	
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [January 2016]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- ========== ========== ========== ========== ========== ========== ========== ========== ========== ========== -->

<script type="text/javascript">insertCopyright();</script>
</body>
</html>
