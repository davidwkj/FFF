<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating a Global Add-in with a Declarative File</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating a Global Add-in with a Declarative File</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article shows how to insert a model independent command in the 
		fixed area of the action bar, using the declarative infrastructure.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAAAfrGeneralWksAddinD Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAAfrGeneralWksAddinD Do</a></li>
					<li><a href="#How">How to Launch CAAAfrGeneralWksAddinD</a></li>
					<li><a href="#Where">Where to Find the 
					CAAAfrGeneralWksAddinD 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to show you how to integrate your model independent 
command in the fixed area of the action bar. This area is on the left hand side 
of the action bar and contains general commands visible all the time. </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAfrGeneralWksAddinD Use Case</h2>
<p>CAAAfrGeneralWksAddinD is a use case of the CAAApplicationFrame.edu framework 
that illustrates AfrFoundation framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAfrGeneralWksAddinD Do</h3>
<p>The CAAAfrGeneralWksAddinD creates a model independent add-in, that adds thwo 
commands in the fixed area of the action bar, the 
		<kbd>Search Demonstrator</kbd> command [<a href="#References">4</a>], and the <kbd>Center Graph demonstrator</kbd> command 
		[<a href="#References">5</a>] .</p>

	
		<p>
		<img alt="" height="179" src="images/CAAAfrGeneralWspAddinD.png" width="876"/></p>

	

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAfrGeneralWksAddinD</h3>
<p>To launch CAAAfrGeneralWksAddinD , you will need to set up the build time environment, 
then compile CAAAfrGeneralWksAddinD along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>But just before compiling, edit the CAAApplicationFrame.edu.dico 
interface dictionary file located in the dictionary directory of the CAAApplicationFrame.edu 
framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAApplicationFrame.eduRscCNext.m\src\CNext\code\dictionary\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>In this file, remove the &quot;<strong>#CAA#</strong>&quot; character at the beginning 
the two following lines:</p>
<pre class="code">...
#CAA#CAAAfrGeneralWksAddinD       CATIWorkbenchAddin          libCAAAfrGeneralWksAddinD  
#CAA#CAAAfrGeneralWksAddinD       CATIAfrGeneralWksAddin      libCAAAfrGeneralWksAddinD
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<article data-xplore-fw='CAAApplicationFrame.edu' data-xplore-mod='CAAAfrGeneralWksAddinD.m'>
<h3><a name="Where"></a>Where to Find the CAAAfrGeneralWksAddinD Code</h3>
<p>The CAAAfrGeneralWksAddinD use case is made of a declarative file located in the 
CAAAfrGeneralWksAddinD.m module in the CAAApplicationFrame.edu framework:</p>
<p><code>
InstallRootFolder\CAADoc\CAAApplicationFrame.edu\CAAAfrGeneralWksAddinD.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>The declarative file is an XML type file called CAAAfrGeneralWksAddinD.afr</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>

<p>To create an addin, there are five steps:</p>
<table>
	<tr>
		<td>1</td>
		<td><a href="#Step1">Creating the Module</a></td>
	</tr>
	<tr>
		<td>2</td>
		<td><a href="#Step2">Creating the Addin Declarative File</a></td>
	</tr>
	<tr>
		<td>3</td>
		<td><a href="#Step3">Creating the Command Headers</a></td>
	</tr>
    <tr>
		<td>4</td>
		<td><a href="#Step4">Arranging the Commands in the Action Bar</a></td>
	</tr>
	<tr>
		<td>5</td>
		<td><a href="#Step5">Providing the Add-in Resources</a></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating the Module</h3>
<h4><a name="Part1"></a>Updating the IdentityCard</h4>
<p>The IdentityCard of your framework that will contain the addin declaration 
needs to contain the following line: </p>
<pre class="code">...
&lt;toolPrerequisite name="MkDAfrTool"/&gt;
...</pre>
<p>This line allows <code>MkCopyPreq</code> to copy the needed prerequisites to process the declarative file of 
your app by mkmk. 
</p>
<h4>Creating a Dedicated Module</h4>
<p>
The declarative file must be defined inside a dedicated module in order to be correctly processed by mkmk. 
</p>
<ul>
<li>Creating the Imakefile.mk
<p>The Imakefile.mk file must contain the two following lines: 
</p>
<pre>BUILT_OBJECT_TYPE=RUNTIME DATA 

SCRAMBLING_KEY=2
</pre>
<p>These lines will activate an encryption of the declarative file by mkmk before putting it inside the RuntimeView. </p>
</li>
<li>Creating the Necessary Folder Hierarchy
<p>The declarative file must be defined inside a particular folder hierarchy 
that should be strictly respected because it contains all the necessary 
information to create the addin.</p>
		
<pre>CAAApplicationFrame.edu
|
|
-------- CAAAfrGeneralWksAddinD.m
              |
              |
              -------------- Imakefile.mk
              |
              |
              -------------- src
                              |
                              |
                              ------ resources
                                         |
                                         |
                                         -----ApplicationFrame
</pre>
</li>

<li>CAAApplicationFrame.edu is the name of the framework containing the declarative file. 
</li>
<li>CAAAfrGeneralWksAddinD.m is the name of the module containing the declarative file. 
</li>
<li>Under the src folder, you must have a folder called <code><strong>resources</strong></code> and 
under its folder another folder called <code><strong>ApplicationFrame</strong></code> (this naming and hierarchy are mandatory).
</li>

</ul>

<p>The folder hierarchy needs to contain the information indicating that 
we are creating a global addin:</p>

<pre>ApplicationFrame
  |
  |
  ----------- AfrWorkshop
                   |
                   |
                   ------- Global
                             |
                             |
                             ----- AfrAddin
                                             
</pre>
<ul>
<li><code><strong>ApplicationFrame</strong></code> is the folder we previously created inside the src folder of the module. 
</li>
<li><code><strong>AfrWorkshop</strong></code> means that we are adding a declarative file for a data model, also called workshop.
</li>
<li><code><strong>Global</strong></code> means that we are creating a global extension. 
</li>
<li><strong>AfrAddin</strong> means that we are creating an addin.</li>
</ul>  

<h3><a name="Step2"></a>Creating the Addin Declarative file</h3>
<p>The declarative file describes your addin. It must have the .afr extension in 
order to be correctly processed by mkmk. For this use case, the file is 
called CAAAfrGeneralWksAddinD.afr</p>
<p>Following is the content of the CAAAfrGeneralWksAddinD.afr file:</p>
<pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;

&lt;Styles xmlns:syp = &quot;http://www.3ds.com/xsd/SYP&quot;&gt;

  &lt;Template syp:name = &quot;CAAAfrGeneralWksAddinDHeaders&quot; Target = &quot;CATCmdHeadersList&quot;&gt;
    &lt;CATCmdHeadersList&gt; 
      &lt;CATCommandHeader ID = &quot;CAAAfrSearchHdrD&quot; ClassName = &quot;CAACafSearchCmd&quot; SharedLibraryName = &quot;CAACafSearch&quot; ResourceFile = &quot;CAAAfrGeneralWksAddinHeaderD&quot; Available = &quot;1&quot;/&gt;
      &lt;CATCommandHeader ID = &quot;CAAAfrCenterGraphHdrD&quot; ClassName = &quot;CAACafCenterGraphCmd&quot; SharedLibraryName = &quot;CAACafCenterGraph&quot; ResourceFile = &quot;CAAAfrGeneralWksAddinHeaderD&quot; Available = &quot;1&quot;/&gt;
    &lt;/CATCmdHeadersList&gt;
  &lt;/Template&gt;

  &lt;Template syp:name = &quot;CAAAfrGeneralWksAddinDAccess&quot; Target = &quot;CATCmdAddin&quot;&gt;
    &lt;CATCmdAddin&gt;
      &lt;CATCmdContainer Name = &quot;AfrActionBarFixedSection&quot;&gt;
        &lt;CATCmdContainer Name = &quot;CAAAfrGeneralWksTlbD&quot;&gt;
          &lt;CATCmdStarter Name = &quot;CAAMmrGeneralSearchStr&quot; Command = &quot;CAAAfrSearchHdrD&quot;/&gt;
          &lt;CATCmdStarter Name = &quot;CAAAfrCenterGraphStr&quot; Command = &quot;CAAAfrCenterGraphHdrD&quot;/&gt;
        &lt;/CATCmdContainer&gt;
      &lt;/CATCmdContainer&gt;
    &lt;/CATCmdAddin&gt;
  &lt;/Template&gt;

&lt;/Styles&gt;
</pre>

<p>The first line adds a basic XML tag that indicates the file is a XML one.
Next, you have to add the root node of the XML file: the Styles node. This node indicates to the parser that it must 
analyze this file as a declarative file.</p>


<p>As you can see, the content of the xml file is made of two sections: </p>
<ul>
<li><strong>CATCmdHeadersList</strong> section : enables to define your command 
headers.</li>
	<li><strong>CATCmdAddin</strong> section : enables to define the layout 
	of your commands.</li>
</ul>
<p>These two sections will be fully described in the following chapters.</p>


<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Creating the Command Headers</h3>

<p>Following is the XML sample corresponding to this section:</p>
<pre>
   &lt;Template syp:name = &quot;CAAAfrGeneralWksAddinDHeaders&quot; Target = &quot;CATCmdHeadersList&quot;&gt;
    &lt;CATCmdHeadersList&gt; 
      &lt;CATCommandHeader ID = &quot;CAAAfrSearchHdrD&quot; ClassName = &quot;CAACafSearchCmd&quot; SharedLibraryName = &quot;CAACafSearch&quot; ResourceFile = &quot;CAAAfrGeneralWksAddinHeaderD&quot; Available = &quot;1&quot;/&gt;
      &lt;CATCommandHeader ID = &quot;CAAAfrCenterGraphHdrD&quot; ClassName = &quot;CAACafCenterGraphCmd&quot; SharedLibraryName = &quot;CAACafCenterGraph&quot; ResourceFile = &quot;CAAAfrGeneralWksAddinHeaderD&quot; Available = &quot;1&quot;/&gt;
    &lt;/CATCmdHeadersList&gt;
&lt;/Template&gt;
</pre>


<p>The section that describes the command headers is referenced by a name valued 
with the syp:name attribute. This name must follow a naming convention: 
xxxHeaders where xxx is the name of your addin (the same as 
the name of the XML file). The Target attribute must be valued to 
CATCmdHeadersList as we are currently declaring command headers. </p>


<p>Then, the CATCmdHeadersList tag can have as many child tags as you want to declare 
command headers for your addin. The tag to declare command headers is the <strong>CATCommandHeader</strong> 
tag. It enables you to declare a command header by giving the following 
information:</p>
<ul>
<li><strong>ID</strong>: this ID is used to reference the command header (for example 
to references a particular command
header when defining the layout of commands in the frame). </li>  
<li><strong>ClassName</strong>: this attribute is the class to instantiate to 
launch the command (this class should use the CATCreateClass macro).</li>
<li><strong>SharedLibraryName</strong>: this attribute 
	corresponds to the name of the shared library that contains the code of the 
	command. </li>
<li><strong>ResourceFile</strong>: this attribute corresponds to the name of the 
resource file associated with the command.</li>
<li><strong>Available</strong>: this attribute indicates 
	whether the command is available or not for the Normal mode (1 means 
	available, 0 means hidden). Prefer using the attribute AvailabilityMode 
	that allows you to define the command header availability for each mode (in 
	fact Available=&quot;1&quot; is similar to AvailabilityMode=&quot;Normal=YES&quot;).
</li>
<li><strong>AvailabilityMode</strong>: specify the availability 
	of the command header for each mode. This attribute takes as parameter a 
	string with the following syntax &quot;Mode1=YES Mode2=NO Mode3=...&quot;. Note that 
	if you don't specify an availability for a particular mode, this mode will 
	use its default availability. The 
	different modes for which the availability can be customized are 
	the following:
	<ul>
		<li>Normal</li>
		<li>Editability</li>
		<li>SmallScale</li>
		<li>LargeScale</li>
		<li>Offlinex</li>
	</ul>
</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Arranging the Commands in the Action Bar</h3>
		
			
<p>The aim of this section is to organize the commands in the frame. In this example, we will add 
our commands in the fixed area of the action bar.</p>
<p><img alt="" height="179" src="images/CAAAfrGeneralWspAddinD.png" width="876"/></p>
	<p>It is mandatory to organize your commands in containers to be able to 
	insert them in the action bar.The 
	hierachy of containers is illustrated in the picture below:</p>
	<p style="width: 288px"><img alt="" height="226" src="images/CAAAfrFixedAreaD.png" width="286"/></p>
	
	<p>Following is the XML sample corresponding to this section:</p>
	<pre>
&lt;Template syp:name = &quot;CAAAfrGeneralWksAddinDAccess&quot; Target = &quot;CATCmdAddin&quot;&gt;

  &lt;CATCmdAddin&gt;
    &lt;CATCmdContainer Name = &quot;AfrActionBarFixedSection&quot;&gt;
      &lt;CATCmdContainer Name = &quot;CAAAfrGeneralWksTlbD&quot;&gt;
        &lt;CATCmdStarter Name = &quot;CAAMmrGeneralSearchStr&quot; Command = &quot;CAAAfrSearchHdrD&quot;/&gt;
        &lt;CATCmdStarter Name = &quot;CAAAfrCenterGraphStr&quot; Command = &quot;CAAAfrCenterGraphHdrD&quot;/&gt;
      &lt;/CATCmdContainer&gt;
    &lt;/CATCmdContainer&gt;
  &lt;/CATCmdAddin&gt;

&lt;/Template&gt;	
	</pre>
	
	
<p>The syp:name attribute for this section must follow a naming convention: 
xxxAccess where xxx is the name of your app (the same as the name of the XML 
file). The Target attribute must be valued to CATCmdAddin. </p>


<p>The Template must have for unique child a <strong>CATCmdAddin</strong> tag.</p>
<p>Then, the CATCmdAddin tag can have as many child CATCmdContainer tags to 
define the hierarchy of containers. In our example, we have a level of container 
for the fixed area of the action bar, that is referenced by the pre-defined 
keyword <strong>AfrActionBarFixedSection</strong>. 
Then, in the fixed section we define a group of commands, that will contain our 
two commands. The CATCmdContainer tag just requires a name attribute that 
enables to link the container with its corresponding resource file. </p>
<p>In the last level of container, the <strong>CATCmdStarter</strong> tag enables to declare the commmands for the container. 
This tag requires two attributes, a name attribute and the command attribute 
that contains the Id of the command header.</p>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Providing the Add-in Resources</h3>
	
<p>You should provide the resources for the commands of your addin : the command 
header resources in the command header resource files: titles, messages, icons. 
You can refer to the article 
&quot;Creating an App with a Declarative File&quot;[<a href="#References">3</a>] 
in which the declaration of resources is described in detail. For this use case, 
the resource files are: CAAAfrGeneralWksAddinHeaderD.CATNls and 
CAAAfrGeneralWksAddinHeaderD.CATRsc.</p>

	<script type="text/javascript">insertLinkToTop();</script>
	<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
	
	<h2><a name="InShort"></a>In Short</h2>
<p>A global add-in enables to create commands that are always available, that is 
to say independant of the current data model and app. You just need to create a XML 
type declarative file with the .afr extension that enables to define your addin 
commands. The declarative file should be located in a specific path of folders 
that indicates that you are creating a global add-in.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<div id="ref">
<table class="reference">
	
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
		<tr>
		<td>[2]</td>
		<td><a href="CAAAfrUcSampleWorkbenchD.htm">Creating an App with a Declarative File</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td><a href="CAAAfrUcSampleAddinD.htm">Creating an App Add-in with a Declarative File</a></td>
	</tr>
    <tr>
		<td>[4]</td>
		<td><a href="CAACafUcSampleSearch.htm">Creating Search Queries</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAACafUcSampleCenterGraph.htm">Center Tree Nodes</a></td>
	</tr>
	
</table>
</div>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [July 2015]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
