<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Editing Derived Representation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Derived Representation</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADerivedRepEdit use case. This use case explains how to edit a derived representation
		in a specified target representation under the root or a sub-assembly.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAADerivedRepEdit
			Use Case</a>
			<ul>
				<li><a href="#What">What Does CAADerivedRepEdit
				Do</a> </li>
				<li><a href="#How">How to Launch CAADerivedRepEdit</a></li>
				<li><a href="#Where">Where to Find the CAADerivedRepEdit
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p> This use case is intended to show you how to create derived representation. 
You will learn to :</p>
<ul>
    <li>How to get derived representation list from target shape under the root product</li>
    <li>How to remove representations from a derived representation</li>
    <li>How to add new representations to a derived representation</li>
    <li>How to get a derived representation from target shape under the sub-assembly product</li>    
    <li>How to remove all representations from a derived representation</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADerivedRepEdit Use Case</h2>
<p>CAADerivedRepEdit is a use case of the CAAAssemblyFeature.edu framework that 
illustrates CATAssemblyUseItf framework capabilities related to derived representation creation and its management.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADerivedRepEdit Do</h3>
<p>The goal of CAADerivedRepEdit use case is to prepare inputs and create a derived representation under 
specified target shape.</p>
<ul>
    <li>Opening the PLM Product (Root).</li>
    <li>Getting all derived representations under the root product.</li>
    <li>Removing specified source representations from the derived representation.</li>    
    <li>Adding specified source representations in the derived representation.</li>    
    <li>Getting a derived representation from a target representation.</li>
    <li>Removing all source representations from a derived representation.</li>        
    <li>Updating the assembly.</li>
    <li>Saving the assembly and exiting.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADerivedRepEdit</h3>
<p>To launch CAADerivedRepEdit, you will need to set up the build time environment, 
then compile CAADerivedRepEdit.m along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Launch the use case as follows: </p>
<pre class="code">mkrun -c <em>&quot;CAADerivedRepEdit Repository ServerName LoginTicket PLMType V_Name&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>repository</td>
		<td><script type="text/javascript">insertRepository();</script></td>
		<td rowspan="3">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>server</td>
		<td>Server name in format protocol://serverName:portNumber/rootURI <br />e.g. http://ve4al14plp:10490/ematrix </td>
	</tr>
	<tr>
		<td>3</td>
		<td>loginTicket</td>
		<td>String representing a valid Login Ticket</td>
	</tr>
	<tr>
		<td>4</td>
		<td>PLMType</td>
		<td>VPMReference</td>
		<td>Component Type</td>
	</tr>
	<tr>
		<td>5</td>
		<td>V_Name</td>
		<td>Title of the Root Product To Open e.g CAARoot</td>
		<td>Component Attribute</td>
	</tr>
</table>
<ul>
	<li>The <strong>first three </strong>are related to the connection and described in the 
	<cite>Connecting to V6 Server</cite> use case [<a href="#References">2</a>].
	</li>
	<li>PLMType defines the PLMType of Component to be opened.</li>
	<li>V_name defines the <strong>value</strong> of the <strong>attribute 
	name</strong>.</li>    
</ul>
<p><strong>Import PLM Data:</strong><br />
The use case requires input PLM Data: PLM Reference. 
This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You must import 
these PLM Data in the database using the Add / Import / 3D XML command prior 
to launching the use case.<br />
The &quot;3dxml&quot; file is supplied at location:</p>
<p><code>InstallRootFolder\CAADoc\CAAAssemblyFeature.edu\InputData\TSTDataCAADerivedRepCreationUseCase.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder where the API CD-ROM is installed. 
This 3D XML file contains the root Product Reference with the following attributes:
</p>
<ul>
    <li><code><strong>V_Name</strong></code>: Root_2</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<article data-xplore-fw='CAAAssemblyFeature.edu' data-xplore-mod='CAADerivedRepEdit.m'>
<h3><a name="Where"></a>Where to Find the CAADerivedRepEdit Code</h3>
<p>The CAADerivedRepEdit use case is made of a single code file named CAADerivedRepEdit.cpp
located in the CAADerivedRepEdit.m module of the CAAAssemblyFeature.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAAssemblyFeature.edu\CAADerivedRepEdit.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the 
folder where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eleven main steps in CAADerivedRepEdit:</p>
<ol>
	<li><a href="#Step1">Parsing Input Arguments</a></li>
	<li><a href="#Step2">Opening the PLM Root Product</a></li>
    <li><a href="#Step3">Get All Derived Representations under the Root Product</a></li>
	<li><a href="#Step4">Get Related Options from Derived Representation</a></li>
    <li><a href="#Step5">Edit by Removing/Adding Source Representations</a></li>
    <li><a href="#Step6">Get a Derived Representation under a Sub-assembly Product</a></li>
    <li><a href="#Step7">Remove All Source Representations</a></li>
	<li><a href="#Step8">Updating the Assembly</a></li>
	<li><a href="#Step9">Saving the Assembly and Exiting</a></li>
</ol>
<p>
<img alt="Input Product" src="images/CAAPictureDerivedRepEditBefore.jpg"/></p>
<p>This picture shows the Product Structure used in the 
use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing Input Arguments</h3>
<p><em>CAADerivedRepEdit</em> begins by checking that the command lines contains six 
arguments. It then retrieves the environment, creates a session [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the PLM Product (Root)</h3>
<p>Retrieve the PLM component based on specified attribute value.</p>
<pre class="code">...
  plmType         = argv[4];
  rootProductName = argv[5];
  // Retrieve the CATIType related with VPMReference
  hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(plmType, hTypeModeler);
  if((FAILED(hr) || (NULL_var == hTypeModeler))) {
    retCode = 10;
    goto EscapeWay;
  }
  
  // Add an attribute field with the product's title
  iAttributeSet.AddAttribute("V_Name", rootProductName.ConvertToChar());
  // Query by attribute
  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler, iAttributeSet, oQueryResults);
  if(SUCCEEDED(hr) && oQueryResults.Size())
  {
    pQueryResult = oQueryResults[1];
    if(NULL != pQueryResult)
      hr = pQueryResult->GetIdentifier(piPLMIdent);
  }
...</pre>
<p>Open your PLM Component in the session using service <em>CATAdpOpener::CompleteAndOpen</em>.</p>
<pre class="code">...
  // Open of the product
  hr = adpOpener.CompleteAndOpen(piPLMIdent, IID_CATIPLMProducts, (void**)&piPLMProduct);
  if((FAILED(hr)) || (NULL == piPLMProduct)) {
    retCode = 12;
    goto EscapeWay;
  }                           
 ...</pre>
<p>Create occurrence for the root product.</p>
<pre class="code">...
  // Get root occurrence from the root product  
  hr = piPLMProduct->QueryInterface(IID_CATIPLMNavReference, (void**)&pIPLMNavRefOnRoot);
  if(SUCCEEDED(hr))
  {
    CATIPrdOccurrenceMngt * pIPrdOccurrenceMngt = NULL;
    hr = CATPrdGetOccurrenceMngt(pIPrdOccurrenceMngt);
    if(SUCCEEDED(hr) && (NULL != pIPrdOccurrenceMngt))
    {
      hr = pIPrdOccurrenceMngt->GetOrCreateRootOccurrence(pIPLMNavRefOnRoot, hRootNavOccurrence);      
    }
    if(pIPrdOccurrenceMngt) { pIPrdOccurrenceMngt->Release(); pIPrdOccurrenceMngt = NULL; }
  }                           
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Get All Derived Representations under the Root Product</h3>
<p>The root product can have one or more 3D Shapes, some of which will be Derived representations.
To get all such derived representations, first load all 3D Shape under the root into the Edit mode.</p>
<pre class="code">...
  // All shapes under the root product must be loaded into the Edit mode
  hr = LoadChildrenReps(hRootNavOccurrence);
  if(FAILED(hr)) {
    retCode = 21;
    goto EscapeWay;
  }
...</pre>
<p><em>LoadChildrenReps</em> internal method is used load all children representations into the Edit mode.</p>

<p>Then derived representation manager must be created to obtain all derived representation features under root product.</p>
<pre class="code">...        
  //  Get derived representation manager
  CATIDerivedRepManager *pDerivedRepManager = NULL;
  hr = CATGetCATIDerivedRepManager(pDerivedRepManager);
  if(FAILED(hr) && NULL == pDerivedRepManager) {
    retCode = 31;
    goto EscapeWay;
  }
  if(pDerivedRepManager)
  {
    // Get all derived representation features under root product
    CATListPtrCATBaseUnknown oListOfDerivedReps;
    hr = pDerivedRepManager->ListDerivedRepFeatures(pIPLMNavRefOnRoot, oListOfDerivedReps);
    if(FAILED(hr) && 0 == oListOfDerivedReps.Size()) {
      retCode = 34;
      goto EscapeWay;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Get Related Options from Derived Representation</h3>
<p>It is possible to obtain options used to create a derived representation.</p>
<pre class="code">...
  // Get import options from the first derived representation
  CATDerivedRepOption nOption = 0;
  CATBaseUnknown * pFirstDerivedRep = oListOfDerivedReps[1];
  hr = pDerivedRepManager->GetOption(pFirstDerivedRep, nOption);
  if(FAILED(hr)) {
    retCode = 32;
    goto EscapeWay;
  }
...</pre>
<p>In above case, first derived representation related options are obtained and can be printed.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Edit by Removing/Adding Source Representations</h3>
<p>Let's prepare list of source representations to be removed.
Internal method <em>GetPartRepList</em> is useful here as it take list of part instance names 
and returns list of representations to be removed.
</p>
<pre class="code">...
  // Prepare list of representations to be removed using part instance names
  iListOfPartsToBeRemoved.Append("Part1.1");
  iListOfPartsToBeRemoved.Append("Part2.2");
  hr = GetPartRepList(hRootNavOccurrence, iListOfPartsToBeRemoved, ListOfSourceRepsToBeRemoved);
  if(ListOfSourceRepsToBeRemoved.Size() == iListOfPartsToBeRemoved.Size())
  {
    // Remove associated geometries from the derived representation
    hr = pDerivedRepManager->RemoveAssociatedGeometry(pTargetRepOcc, ListOfSourceRepsToBeRemoved);
    if(FAILED(hr)) {
        retCode = 35;
        goto EscapeWay;
    }
  }
...</pre>

<p>The derived representation is now edited by removing above two representations.
Similarly let's add a new source representation.</p>
<pre class="code">...
  // The part is under a product 'SubAsm' under the root. Let's get 'SubAsm' occurrence.
  hr = GetCompOccurrence(hRootNavOccurrence, "SubAsm", hSubAsmNavOccurrence);
  // From a part under a sub-assembly, let's add source shape(s) to the existing derived representation     
  iListOfPartsToBeAdded.Append("Part1.2");      
  hr = GetPartRepList(hSubAsmNavOccurrence, iListOfPartsToBeAdded, ListOfSourceRepsToBeAdded);
  if(FAILED(hr) && 0 == ListOfSourceRepsToBeAdded.Size()) {
    retCode = 23;
    goto EscapeWay;
  }
  // Load source shapes before adding
  hr = LoadRepresentation(ListOfSourceRepsToBeAdded);
  if(FAILED(hr)) {
    retCode = 22;
    goto EscapeWay;
  }
  // Add more geometries
  hr = pDerivedRepManager->AddAssociatedGeometry(pTargetRepOcc, ListOfSourceRepsToBeAdded);
    if(FAILED(hr)) {
    retCode = 33;
    goto EscapeWay;
  }
...</pre>
<p>As usual, before adding any source representation, it must be loaded into the Edit mode using <em>LoadRepresentation</em>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Get a Derived Representation under a Sub-assembly Product</h3>
<p>To obtain derived representation from the target shape under the sub-assembly product, 
first target representation occurrence must be obtained. This can be done by passing 
sub-assembly navigation occurrence and representation name to internal method <em>GetTargetShape</em>.</p>
    <pre class="code">...
  // Prepare to get derived representation in a 3D Shape under the sub-assembly.
  hr = GetTargetShape(hSubAsmNavOccurrence, "TargetShapeSubAsm---.000", pSubAsmTargetRepOcc);      
  if(FAILED(hr) || NULL == pSubAsmTargetRepOcc) {
    retCode = 21;
    goto EscapeWay;
  }
  hr = LoadRepresentation(pSubAsmTargetRepOcc);
  if(FAILED(hr)) {
    retCode = 22;
    goto EscapeWay;
  }
...</pre>

<p>Now target representation is ready to be use. Manager's method GetDerivedRepFeature is used to obtain 
the derived representation from it.</p>
<pre class="code">...
  CATIPLMNavRepReference * opSubAsmTargetRepRef = NULL;
  hr = pSubAsmTargetRepOcc->GetRelatedRepReference(opSubAsmTargetRepRef);
  if(SUCCEEDED(hr) && opSubAsmTargetRepRef)
  {
    CATBaseUnknown * opDerivedRepUnderSubAsm = NULL;
    // Get derived representation
    hr = pDerivedRepManager->GetDerivedRepFeature(opSubAsmTargetRepRef, opDerivedRepUnderSubAsm);
    if(FAILED(hr) || NULL == opDerivedRepUnderSubAsm) {
      retCode = 37;
      goto EscapeWay;
    }
...</pre>
<p>If derived representation exists in the target then it will be obtained.</p>
    <script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->  
<h3><a name="Step7"></a>Remove All Source Representations</h3>
<p>It is easy to remove all source representations from the selected derived representation.</p>
<pre class="code">...
  // Remove all source shapes from this derived representation
  hr = pDerivedRepManager->RemoveAllAssociatedGeometry(pSubAsmTargetRepOcc);  
...</pre>
<p>Since all source representations are removed, the derived representation is automatically deleted.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Updating the Assembly</h3>
<p>Although derived representation is already created, 
it is recommended to perform PLM Update on the father product of the target representation.
This will correctly update import links to source representations.</p>
<pre class="code">...
  // ==========================================================================
  // PLM Update : After derived representation is created, 
  // PLM update is recommended to update import links to source representations.
  // ==========================================================================  
  spRootActor = pIPLMNavRefOnRoot;
  hr = CATPLMUpdateFactory::InstantiateUpdateEngine(piUpdateEngine);
  if(FAILED(hr) || NULL == piUpdateEngine) {
    retCode = 41;
    goto EscapeWay;
  }
  hr = piUpdateEngine->Init(spRootActor);
  hr = piUpdateEngine->GetGlobalPLMStatus(updateStatus);
  switch(updateStatus)
  {
  case CATIPLMUpdateEngine::Status_UpToDate:
  case CATIPLMUpdateEngine::Status_UpToDateWithWarnings:
    break; // Already up to date.
  case CATIPLMUpdateEngine::Status_OutOfDate:
  case CATIPLMUpdateEngine::Status_OutOfDateDateWithWarnings:
  {
    HRESULT updateRC = piUpdateEngine->GlobalPLMUpdate();
    if(S_OK == updateRC || S_FALSE == updateRC) {
      hr = S_OK;    // update successful (warnings).
    }
    else
      hr = E_FAIL;  // update unsuccessful (errors).
  }
  case CATIPLMUpdateEngine::Status_Error:
    break;
  case CATIPLMUpdateEngine::Status_UndefinedStatus:
    break;
  }

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Saving the Assembly and Exiting</h3>
<pre class="code">...
  // ==========================================================================
  // Saving the Root Product
  // ==========================================================================
  CATAdpSaver saver;
  hr = saver.Save();
  if(FAILED(hr)) return 1;
  
  // ==========================================================================
  // Close the PLM session (Disconnect and Delete session)
  // ==========================================================================
  hr = CATPLMSessionServices::ClosePLMSession();
</pre>
<p>Before closing the session and after saving PLM component, the PLM Root component must be removed of the Bag, by using
<code>RemoveRoot</code> method defined in <em>CATOmbLifeCycleRootsBag</em>.</p>
<p>
<img alt="Modified Product" src="images/CAAPictureDerivedRepEditAfter.jpg"/></p>
<p>Desired derived representation is created in specified target representation. 
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to edit a derived representation under root product or sub-assembly product. 
</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<div id="ref">
<table class="reference">
    <tr>
        <td>[1]</td>
        <td>
            <a href="../CAADocUseCases/CAADocRunSample.htm">
                Building and Launching a Use Case
            </a>
        </td>
    </tr>
    <tr>
        <td>[2]</td>
        <td>
            <a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
                Connecting to V6 Server
            </a>
        </td>
    </tr>
</table>
</div>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2018]</td>
		<td>Document created</td>
	</tr>
	</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
