<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Editing Assembly Pattern</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Editing Assembly Pattern</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
    <tr>
		<td>
		<h2>Abstract</h2>
            <p>
                This article discusses the CAAAsmPatternEdit use case. This use case explains how to edit assembly pattern
                existing in given product data. Delete of assembly pattern is also explained.
            </p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a> </li>
			<li><a href="#UseCase">The CAAAsmPatternEdit
			Use Case</a>
			<ul>
				<li><a href="#What">What Does CAAAsmPatternEdit
				Do</a> </li>
				<li><a href="#How">How to Launch CAAAsmPatternEdit</a></li>
				<li><a href="#Where">Where to Find the CAAAsmPatternEdit
				Code</a></li>
			</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a> </li>
			<li><a href="#InShort">In Short</a> </li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
    <p>
        This use case is intended to show you how to edit an assembly pattern.
        You will learn:
    </p>
    <ul>
        <li>How to find an assembly pattern under root product</li>
        <li>How to edit selected assembly pattern</li>
        <li>How to delete selected assembly pattern</li>
    </ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAAsmPatternEdit Use Case</h2>
<p>CAAAsmPatternEdit is a use case of the CAAAssemblyFeature.edu framework that 
illustrates CATAsmPatternUseItf framework capabilities regarding assembly pattern edit operations.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAAsmPatternEdit Do</h3>
<p>The goal of CAAAsmPatternEdit use case is to 
edit an assembly pattern by replacing existing specification with a new one.
</p>
<ul>
    <li>Opening the PLM Product (Root).</li>
    <li>Loading representation containing the new specification.</li>
    <li>Preparing new specification.</li>
    <li>Selecting an assembly pattern under the root.</li>
    <li>Printing related instances.</li>
    <li>Replacing specification.</li>    
    <li>Deleting assembly pattern.</li>
    <li>Updating the assembly.</li>
    <li>Saving the assembly and exiting.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAAsmPatternEdit</h3>
<p>To launch CAAAsmPatternEdit, you will need to set up the build time environment, 
then compile CAAAsmPatternEdit.m along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>Launch the use case as follows: </p>
<pre class="code">mkrun -c <em>&quot;CAAAsmPatternEdit Repository ServerName LoginTicket PLMType V_Name&quot;</em></pre>
<p>where the description of the arguments is the following:</p>
    <table class="fill">
        <colgroup align="center" span="1"></colgroup>
        <tr>
            <th>Position</th>
            <th>Description</th>
            <th>Example</th>
            <th>Category</th>
        </tr>
        <tr>
            <td>1</td>
            <td>repository</td>
            <td>
            <script type="text/javascript">insertRepository();</script></td>
            <td rowspan="3">Connection</td>
        </tr>
        <tr>
            <td>2</td>
            <td>server</td>
            <td>Server name in format protocol://serverName:portNumber/rootURI <br />e.g. http://ve4al14plp:10490/ematrix </td>
        </tr>
        <tr>
            <td>3</td>
            <td>loginTicket</td>
            <td>String representing a valid Login Ticket</td>
        </tr>
        <tr>
            <td>4</td>
            <td>PLMType</td>
            <td>VPMReference</td>
            <td>Component Type</td>
        </tr>
        <tr>
            <td>5</td>
            <td>V_Name</td>
            <td>Title of the Root Product To Open e.g PatternRoot</td>
            <td>Component Attribute</td>
        </tr>
    </table>
    <ul>
        <li>
            The <strong>first three </strong>are related to the connection and described in the
            <cite>Connecting to V6 Server</cite> use case [<a href="#References">2</a>].
        </li>
        <li>PLMType defines the PLMType of Component to be opened.</li>
        <li>
            V_name defines the <strong>value</strong> of the <strong>
                attribute
                name
            </strong>.
        </li>
    </ul>
    <p>
        <strong>Import PLM Data:</strong><br />
        The use case requires input PLM Data: PLM Reference.
        This data is stored in 3D XML files, whose extension is &quot;3dxml&quot;. You must import
        these PLM Data in the database using the Add / Import / 3D XML command prior
        to launching the use case.<br />
        The &quot;3dxml&quot; file is supplied at location:
    </p>
    <p><code>InstallRootFolder\CAADoc\CAAAssemblyFeature.edu\InputData\TSTDataCAAAsmPatternEditUseCase.3dxml.</code></p>
    <p>
        where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder where the API CD-ROM is installed.
        This 3D XML file contains the root Product Reference with the following attributes:
    </p>
    <ul>
        <li><code><strong>V_Name</strong></code>: PatternRoot</li>
    </ul>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<article data-xplore-fw='CAAAssemblyFeature.edu' data-xplore-mod='CAAAsmPatternEdit.m'>
<h3><a name="Where"></a>Where to Find the CAAAsmPatternEdit Code</h3>
    <p>
        The CAAAsmPatternCreation use case is made of a single file named CAAAsmPatternCreation
        located in the CAAAsmPatternCreation.m module of the CAAAssemblyFeature.edu framework:
    </p>
    <p><code>InstallRootFolder\CAADoc\CAAAssemblyFeature.edu\CAAAsmPatternEdit.m\</code></p>
    <p>
        where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the
        folder where the API CD-ROM is installed.
    </p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eleven main steps in CAAAsmPatternEdit:</p>
<ol>
	<li><a href="#Step1">Parsing Input Arguments</a></li>
	<li><a href="#Step2">Opening the PLM Root Product</a></li>	
	<li><a href="#Step3">Loading Specification Component</a></li>
    <li><a href="#Step4">Prepare Input Specification</a></li>    
	<li><a href="#Step5">Find Assembly Pattern Under the Root Product</a></li>
    <li><a href="#Step6">Get Specification</a></li>
	<li><a href="#Step7">Replace Specification</a></li>	
    <li><a href="#Step8">Delete Assembly Pattern</a></li>	
	<li><a href="#Step9">Updating the Assembly</a></li>
	<li><a href="#Step10">Saving the Assembly and Exiting</a></li>
</ol>
<p>
<img alt="Input Product" src="images/CAAPicturePatternEditBefore.jpg" width="585" height="460"/></p>
<p>This picture shows the Product Structure used in the 
use case.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Parsing Input Arguments</h3>
<p><em>CAAAsmPatternEdit</em> begins by checking that the command lines contains five 
arguments. It then retrieves the environment, creates a session [<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Opening the PLM Product (Root)</h3>
<p>Retrieve the PLM component which identifies the correct reference product.</p>
<pre class="code">...
  plmType         = argv[4];
  rootProductName = argv[5];
  // ========================================================================================
  // - Query/Open/Expand of the reference product with its associated representation
  // Retrieving the customized Reference of the Product modeler
  // ========================================================================================
  hr = CATCkePLMNavPublicServices::RetrieveKnowledgeType(plmType, hTypeModeler);
  if((FAILED(hr) || (NULL_var == hTypeModeler))) {
    retCode = 10;
    goto EscapeWay;
  }
  // ========================================================================================
  // - Opens the reference product
  // ========================================================================================
  attributeSet.AddAttribute("V_Name", rootProductName.ConvertToChar());
  hr = CATAdpPLMQueryServices::GetElementsFromAttributes(hTypeModeler, attributeSet, ListP_QueryResults);
  if(ListP_QueryResults.Size())
  {
    pQueryResult = ListP_QueryResults[1];
    if(NULL != pQueryResult)
      hr = pQueryResult->GetIdentifier(pIPLMIdent);
  }
...</pre>
<p>Open your PLM Component </p>
<pre class="code">...
  // ========================================================================================
  // - Expand and Expand of the product
  // ========================================================================================
  hr = adpOpener.CompleteAndOpen(pIPLMIdent, IID_CATIPLMProducts, (void**)&pIPLMProduct3DH);
 ...</pre>
<p><em>CATAdpOpener::CompleteAndOpen</em> is a service used to open PLM component in PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Loading Specification Component</h3>
<p>Assembly pattern uses following types of specifications:</p>
<ul>
    <li>a Part design pattern OR</li>
    <li>a GSD pattern OR</li>
    <li>a Geometrical set of axes systems OR</li>
    <li>an Ordered geometrical set of axes systems</li>
</ul>
<p>Before using any specification, the part containing the specification to be used must be loaded into <em>Edit</em> mode. 
Part design pattern specification that we want to use to replace existing specification is inside part 'SpecPart'.</p>
<pre class="code">...
  hr = LoadComponent(hRootNavOccurrence, "SpecPart");
...</pre>
<p><em>LoadComponent</em> internal method finds the part 'SpecPart' and then loads it into <em>Edit</em> mode.</p>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Prepare Input Specification</h3>
<p>After part is loaded into Edit mode, we need to access part design pattern specification.
One way to do it is by navigating part representation. However we take advantage of the fact that 
they are published under root. It is easy to search publication by its name.</p>
<pre class="code">...
  // Part design pattern 'CircPattern.1' will be used as new specification for the assembly pattern 
  iStrCircPattern = "CircPattern.1";
  hr = SearchPublicationByName(pIPLMNavRefOnRoot, iStrCircPattern, piCircPattSpecOIC);
  if(FAILED(hr) || (NULL == piCircPattSpecOIC)) {
    retCode = 23;
    goto EscapeWay;
  }
...</pre>
<p><em>SearchPublicationByName</em> internal method retrieves a publication for given name and 
returns an object of <em>CATOmbObjectInContext</em> class which is ready to use.</p>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Find Assembly Pattern Under the Root Product</h3>
<p>To get assembly pattern under root product, we need to create assembly pattern manager.</p>
<pre class="code">...
  // ==========================================================================
  // Create pattern manager for the root product
  // ==========================================================================  
  CATIAssemblyUsePatternManager * piPattManager = NULL;
  hr = CATCreateAssemblyUsePatternManager::CreatePatternManager(pIPLMNavRefOnRoot, piPattManager);
  if(FAILED(hr) || NULL == piPattManager) {
    retCode = 31;
    goto EscapeWay;
  }  
  
  if(piPattManager)
  {
    CATListPtrCATIAssemblyUsePattern oAsmPatternList;
    // Task 1: 
    hr = piPattManager->GetPatternList(oAsmPatternList);
    if(FAILED(hr) || 0 == oAsmPatternList.Size()) {
      retCode = 34;
      goto EscapeWay;
    }    
    
    PrintPatternList(oAsmPatternList);
    CATIAssemblyUsePattern * piFirstAsmPattern = NULL;
    piFirstAsmPattern = oAsmPatternList[1];
    if(NULL == piFirstAsmPattern) {
      retCode = 34;
      goto EscapeWay;
    }    
...</pre>
<p><em>GetPatternList</em> method returns all existing assembly pattern connections under the root product. 
We select first assembly pattern connection and print its name. 
We can also print related instance using <em>GetPatternInstances</em> method as shown below.</p>    
<pre class="code">...
    CATListPtrCATIPLMNavInstance oListOfInstanceBefore;
    hr = piFirstAsmPattern->GetPatternInstances(oListOfInstanceBefore);
    if(FAILED(hr) || 0 == oListOfInstanceBefore.Size()) {
      retCode = 35;
      goto EscapeWay;
    }
    PrintInstanceList(oListOfInstanceBefore);
...</pre>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Get Specification</h3>
<p>We can get existing specification of the selection pattern connection using <em>GetSpecification</em> method.</p>
<pre class="code">...
    CATBaseUnknown * opiSpecBU = NULL;
    CATBaseUnknown * opiSpecContextBU = NULL;
    hr = piFirstAsmPattern->GetSpecification(opiSpecBU, opiSpecContextBU);
    if(SUCCEEDED(hr) && opiSpecBU)
    {
      CATOmbObjectInContext * opiSpecOmbObject = static_cast<CATOmbObjectInContext *=*>(opiSpecBU);
      if(opiSpecOmbObject)
      {
        CATBaseUnknown * opSpecTarget = NULL;
        hr = opiSpecOmbObject->GetObjectOutOfContext(opSpecTarget, IID_CATBaseUnknown);
        if(SUCCEEDED(hr) && opSpecTarget) 
        {
          PrintBUObject(opSpecTarget);
          opSpecTarget->Release(); opSpecTarget = NULL;
        }
      }
      opiSpecBU->Release(); opiSpecBU = NULL;
      if(opiSpecContextBU) {
        opiSpecContextBU->Release(); opiSpecContextBU = NULL;
      }
    }
...</CATOmbObjectInContext></pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Replace Specification</h3>
<p>To replace specification of the assembly pattern:</p>
<pre class="code">...
    // Component & new specification are under the same product hence specification context is NULL.  
    piSpecContextOIC = NULL;
    hr = piFirstAsmPattern->ReplaceSpecification(piCircPattSpecOIC, piSpecContextOIC);
...</pre>
<p>Pattern instances will be added or deleted to take into account new specification. 
The pattern instances will be positioned as per positions in the new specification. 
The pattern instances can be printed to be sure that specification was replaced correctly.</p>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Delete Assembly Pattern</h3>
<p>To delete the assembly pattern under root prouct</p>
<pre class="code">...
    // ========================================================================
    // Task 3: Delete the assembly pattern, without deleting related pattern instances  
    // ========================================================================
    hr = piPattManager->DeletePattern(piFirstAsmPattern, FALSE); // FALSE == keep instances
...</pre>
<p>Pattern instances will be kept but they are no more associative with the specification.</p>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Updating the Assembly</h3>
<pre class="code">...
  // ===========================================================================  
  // PLM Update : After assembly pattern creation PLM update is recommended
  // ===========================================================================  
  spRootActor = pIPLMNavRefOnRoot;  
  hr = CATPLMUpdateFactory::InstantiateUpdateEngine(piUpdateEngine);
  if(FAILED(hr) || NULL == piUpdateEngine) {
    retCode = 34;
    goto EscapeWay;
  }  
  hr = piUpdateEngine->Init(spRootActor);
  hr = piUpdateEngine->GetGlobalPLMStatus(updateStatus);
  switch(updateStatus)
  {
  case CATIPLMUpdateEngine::Status_UpToDate:
  case CATIPLMUpdateEngine::Status_UpToDateWithWarnings:
    break; // Already up to date.
  case CATIPLMUpdateEngine::Status_OutOfDate:
  case CATIPLMUpdateEngine::Status_OutOfDateDateWithWarnings:
  {
    HRESULT updateRC = piUpdateEngine->GlobalPLMUpdate();
    if(S_OK == updateRC || S_FALSE == updateRC) {
      hr = S_OK;    // update successful (warnings).
    }
    else
      hr = E_FAIL;  // update unsuccessful (errors).
  }
  case CATIPLMUpdateEngine::Status_Error:    
    break;
  case CATIPLMUpdateEngine::Status_UndefinedStatus:    
    break;
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Saving the Assembly and Exiting</h3>
<pre class="code">...
  // ==========================================================================
  // Saving the Root Product
  // ==========================================================================
  CATAdpSaver saver;
  hr = saver.Save();
  if(FAILED(hr)) return 1;
  
  // ==========================================================================
  // Close the PLM session (Disconnect and Delete session)
  // ==========================================================================
  hr = CATPLMSessionServices::ClosePLMSession();
</pre>
<p>Before closing the session and after saving PLM component, the PLM Root component must be removed of the Bag, by using
<code>RemoveRoot</code> method defined in <em>CATOmbLifeCycleRootsBag</em>.</p>

<p>
<img alt="Modified Product" src="images/CAAPicturePatternEditAfter.jpg"/></p>
<p>Desired assembly patterns are created under root product and specified target product. 
Pattern engineering connections are created for pattern instance to maintain the relative positioning as per specification. 
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case has demonstrated the way to edit an assembly pattern existing in product data.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<div id="ref">
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
    <tr>
        <td>[2]</td>
        <td>
            <a href="#" onclick="javascript:CAAlinkOutOfPreqs('CAAPlmServerAccess/CAAAdpUcBasicBatch.htm'); return false;">
                Connecting to V6 Server
            </a>
        </td>
    </tr>
</table>
</div>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Mar 2018]</td>
		<td>Document created</td>
	</tr>
	</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
