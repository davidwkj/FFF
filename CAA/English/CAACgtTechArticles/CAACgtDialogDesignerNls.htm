<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta content="Ta" name="topictype" />
<meta content="cpp" name="devlang" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>CATNls/CATRsc Resources Generation</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>CATNls/CATRsc Resources Generation</h1>
		</td>
	</tr>
	<tr>
		<td class="tech">Technical Article</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>The purpose of this article is to explain how the designer handles the 
		generation of the CATNls/CATRsc resources files.</p>
		<div id="toc">
		<ul>
			<li><a href="#Installing_Dialog_Designer">Activating/Deactivating the Feature</a></li>
			<li><a href="#Installing_Dialog_Designer1">Properties Generated by the Designer</a></li>
			<li><a href="#Installing_Dialog_Designer0">Concurrent Edition of the Resources Files</a></li>
			<li><a href="#Installing_Dialog_Designer2">Simulation</a></li>
			<li><a href="#Installing_Dialog_Designer3">Code Generation</a></li>
			<li><a href="#NonASCIIResources">How to Manage Resources for Specific Languages</a></li>
		</ul>
		</div>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Installing_Dialog_Designer"></a>Activating/Deactivating the Feature</h2>
<p>The generation of CATNls/CATRsc files is automatically activated when a new file 
is created.</p>
<p>Once the file is created, the feature can be activated or deactivated using the &#8216;File 
infos&#8217; tab in the design view of the edited document, checking the &#8216;Use 
CATNls/CATRsc resources&#8217; option:</p>
<p><img alt="" src="images/NLSActivated.png"/></p>
<p>In particular, this technique can be used to activate the export of resources 
in DSGen files created with a previous version of IDD that didn&#8217;t support 
the automatic resources generation.</p>
<p><strong>File creation or feature activation :</strong></p>
<p>In this case if no resources file is detected, we created them in the CNext/resources/msgcatalog 
directory (the directory is also created if it doesn&#8217;t exist).</p>
<p>If the CATNls and CATRsc files are found, we merge the DSGen data and the CATNls/CATRsc 
data. If a conflict between the files is detected, the designer asks the source 
that should be used to load resources. A conflict happens only if a property value 
is defined in both CATNls/CATRsc files and the DSGen file, and their values don&#8217;t 
match. After this optional export operation, the resources data will always be read 
from the CATNls/CATRsc files.</p>
<p><img alt="" height="125" src="images/NLSImportExport.png" width="503"/></p>
<p><strong>File with the feature activated opening :</strong></p>
<p>When a file with this feature activated is opened, the resources files must exist, 
otherwise the resources edition will be locked. We use this strategy to avoid creating 
new CATNls/CATRsc files that may have been created earlier but deleted or moved. 
In this case, you must restore the CATNls/CATRsc files.</p>
<p><strong>CATNls/CATRsc files loading :</strong></p>
<p>The editor searches for the CATNls and CATRsc files in every CNext* directories. 
If the files can be found in several directories, we signal the problem, and prevent 
any edition impacting the CATNls and CATRsc files in the designer. Since we can 
only control one set of resources files, we prevent the automatic edition of the 
resources files if several are detected, to avoid de-synchronizations.</p>
<p>The resources files are then parsed, and the dialog properties values defined 
in those files are imported in the DSGen file model. The manually entered key/value 
entries and comments are also imported and will be regenerated by the designer when 
it will update the CATNls/CATRsc files.</p>
<p><strong>Loading failure:</strong></p>
<p>If the loading of the CATNls/CATRsc files fails, we still mark the feature as 
activated, but we lock the resources edition and some operations that may modify 
the resources files: widgets creation, deletion, move and name change. We display 
the error that occurred that should be resolved. Once corrected, the document must 
be reloaded to be able to fully edit the design of the dialog box.</p>
<p>In this sample, we see the error message displayed in the designer, and we see 
that the 'Name' and resources properties are not editable.</p>
<p><img alt="" height="587" src="images/NLSLoadError.png" width="822"/></p>
<p><strong>Feature deactivation:</strong></p>
<p>If the resources export feature is deactivated, the last version of the external 
resources is left in the DSGen model. We ensure this way that no design data is 
lost when the feature is deactivated.</p>
<p><strong>Resources generation:</strong></p>
<p>If the designer generates the designed widget resources, we guarantee that the 
items in the generated CATNls and CATRsc files will have a stable order. Items that 
were already in the file will keep the same location (even if the key name may change 
due to a widget displacement or renaming), and the new keys will be added at the 
end of the files. This is also valid for comments or keys added manually. This will 
simplify potential merges on the CATNls/CATRsc files.</p>
<p><strong>Remark</strong>: The feature will not handle the rename or move operation 
on the CATNls and CATRsc files automatically if the DSGen file is renamed or moved. 
Those files might be controlled by a source code manager, and the move operation 
could require some specific manual interactions.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Installing_Dialog_Designer1"></a>Properties Generated by the Designer</h2>
<p>The following textual and iconic resources will be written in the resources files, 
for every widget created in the designer:</p>
<p>Properties in the &#8216;Text Resources&#8217; category:</p>
<ul>
	<li>Accelerator</li>
	<li>Help</li>
	<li>LongHelp</li>
	<li>ShortHelp</li>
	<li>Title.</li>
</ul>
<p>Properties in the &#8216;Icons&#8217; category:</p>
<ul>
	<li>IconFocussed</li>
	<li>IconNormal</li>
	<li>IconSelected.</li>
</ul>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Installing_Dialog_Designer0"></a>Concurrent Edition of the Resources 
Files</h2>
<p><strong>Edition of the CATNls file in Visual Studio:</strong></p>
<p>The CATNls files may contain keys entries that are entered manually (like Combo 
box items). The designer can load those data and preserve them, while automatically 
editing the resources that correspond to widget&#8217;s properties. Moreover, we 
support the concurrent edition of the resources files and the resources data in 
the designer if the files are opened in the same instance of Visual Studio. We provide 
the same feature on the CATRsc files to have a consistent behavior on those resources 
files handling, although those files don&#8217;t need to be edited manually.</p>
<p>When the DSGen and the CATNls files are opened, we don&#8217;t use the resources 
files on disk anymore, but the in-memory representation of the CATNls file loaded 
in Visual Studio.</p>
<p>When the DSGen file is modified (but not necessarily saved), we update the CATNls 
file document in Visual Studio.</p>
<p>When the CATNls file is modified in Visual Studio, we will use these modifications, 
even if the file isn&#8217;t saved after modification. After the modification in 
the Visual Studio document, we read this modification, and keep it as the current 
state of the CATNls file in the designer controller. When the DSGen file gains the 
focus (by becoming the active document), we will reload the resources from the last 
state read in the Visual Studio document. In particular, if the CATNls file is modified 
in Visual Studio and then closed, <strong>we keep in the designer the last state 
of the file in the Visual Studio document, even if the file isn&#8217;t saved</strong>. 
We do this to ensure that the modification done by the designer will be preserved 
when the CATNls file is closed. However, if you close the DSGen file without saving, 
or if you deactivate the CATNls export, this current state is lost.</p>
<p><strong>Edition of the CATNls file in an other editor:</strong></p>
<p>We listen to the system notifications on the CATNls file change. If this file 
is modified by another editor, we will handle the modification when the DSGen document 
retrieves the focus, or when the system indicate the file change if it already has 
the focus. In this case, we signal the file change, asking whether the designer 
should reload the file or ignore the modification.</p>
<p>We do this only when the CATNls file isn&#8217;t already opened in Visual Studio. 
Otherwise, Visual Studio will automatically handle the reloading of the file if 
their content is modified by another editor.</p>
<p>When Visual Studio controls the CATNls file reloading:</p>
<p><img alt="" height="171" src="images/ReloadNls3.png" width="487"/></p>
<p>When we control the CATNls file reloading:</p>
<p><img alt="" height="125" src="images/ReloadNls2.png" width="467"/></p>
<p><strong>Remark:</strong> When a modification is done in the CATNls file (in Visual 
Studio or in another editor), the undo/redo stack is discarded in the designer.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Installing_Dialog_Designer2"></a>Simulation</h2>
<p>When the feature is activated, the simulator will also load the resources properties 
from the CATNls/CATRsc files. There is no need to update the runtime view before 
launching the simulator.</p>
<p><strong>Activating the Virtual NLS mode:</strong></p>
<p>In order to check the behavior of the dialog box at runtime in languages other 
that English, we add the capability to activate the Virtual NLS mode in the simulator, 
that is the standard process used to perform this validation. The design contextual 
menu will have an additional item that will allow the activation/deactivation of 
this mode. When it&#8217;s activated, we will export the CATNlsTest environment 
variable before starting the simulator, so that the runtime code will read the NLS 
Test data generated by mkmk instead of the real CATNls file.</p>
<p><img alt="" src="images/VirtualNLS.png"/></p>
<p>If this mode is activated, we check before launching the simulator that the NLS 
Test file is up-to-date. If the generated NLS Test file is older than the original 
CATNls file, we show a warning advising to rebuild the framework containing the 
dialog box. However, the simulator is still launched in this case.</p>
<p><img alt="" height="129" src="images/VirtualNLSWarning.png" width="333"/></p>
<p>When the simulator is launched in this mode, its will automatically load the 
NLS Test data that can be used to perform the validation of the dialog box in languages 
other than English. Here we see the design of the dialog box on the left, and the 
simulation with Virtual NLS data on the right.</p>
<p><img alt="" height="354" src="images/VirtualNLSSimu.png" width="706"/></p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Installing_Dialog_Designer3"></a>Code Generation</h2>
<p>When the feature is activated, the code generation is updated in order to load 
the resources from the CATNls/CATRsc files at runtime:</p>
<ul>
	<li>In the header file : the Dialog Designer compiler will generate the DeclareResource 
	macro to load the resources from the CATNls/CATRsc files.</li>
	<li>In the implement file : the C++ set code for the resources properties isn't 
	generated anymore. </li>
</ul>
<p><strong>Remark:</strong> The designer will not update the runtime view automatically. 
Before executing a dialog box with this feature activated, you must call the Create 
Runtime View command.</p>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="NonASCIIResources"></a>How to Manage Resources for Specific Languages</h2>
<p><b>Translate Dialog resources to a specific language</b></p>
<p>CATNls files generated by the Dialog Designer tool can contain only ASCII characters. 
Then for some languages with non ASCII characters, CATNls files must be translated 
outside from the tool, and copied in the associated language directory. Example: 
in <em>CNext/resources/msgcatalog/Japanese</em>. More over, it is forbidden to write 
non ASCII string in the Implementation file view, because it will be saved in an 
incompatible format and the compiler may not support non ASCII characters.</p>
<p>Considering those 2 limitations, here is the methodology to manage non ASCII 
CATNls files based on a sample with Japanese characters:</p>
<p>The sample is a very basic panel containing just a Hello panel with a Label to 
display "Hello", and the three standard buttons OK, Cancel, Help. </p>
<ol class="task">
	<li>
	<p>First you create a new CodeGen.DSGen file with the DialogDesigner tool, and 
	insert a Label.</p>
	<p><img alt="" src="images/NLSMethod1.png"/></p>
	</li>
	<li>
	<p>Then, in the <em>Properties</em> view enter the English NLS values for the 
	dialog title (Hello Dialog), the label title (Hello), and the three buttons 
	titles (Okay, No thanks, Help me).</p>
	<p><img alt="" src="images/NLSMethod2.png"/></p>
	</li>
	<li>
	<p>Save the DSGen file. The file CodeGen.CATNls is created in directory CNext/resources/msgcatalog, 
	and it contains:</p>
	<pre class="code">Title = "Hello Dialog";
Label1.Title = "Hello";</pre>
	<p><strong>Note:</strong> NLS strings for standard buttons are not specified 
	in the CATNls file. By default, NLS string for those buttons are managed directly 
	in the DSGen file. Though, you need to <strong>add the 3 additional keys in 
	the CATNls file to be able to translate them later to another language</strong>. 
	So edit the CATNls file from directory CNext/resources/msgcatalog and enter:</p>
	<pre class="code">Title = &quot;Hello Dialog&quot;;
Label1.Title = &quot;Hello&quot;;
BOK = &quot;okay&quot;;
BCancel = &quot;No thanks&quot;;
BHelp = &quot;Help me&quot;;</pre>
	</li>
	<li>
	<p>Copy this file in the resource directory for Japanese language CNext/resources/msgcatalog/Japanese 
	and <strong>convert the copied file in the specific codepage (Shift-JIS for 
	Japanese) </strong>.</p>
	</li>
	<li>
	<p>Edit the Japanese file and translate NLS strings. The resulting Japanese 
	CATNls file contains now:</p>
	<p><img alt="" src="images/NLSMethod3.png"/></p>
	</li>
	<li>
	<p>Update the workspace run time view, using the "<em>Refresh Runtime View</em>" 
	command from the "<em>Workspace Explorer</em>".</p>
	<p><img alt="" src="images/NLSMethod4.png"/> </p>
	</li>
	<li>
	<p>Now you can simulate the panel using the "Simulate" command in the Dialog 
	Designer:</p>
	<p><img alt="" src="images/NLSMethod5.png"/></p>
	<p>The simulated panel is displayed with the text in Japanese except for the 
	three default buttons OK, Cancel, Help. This is a limitation of the Simulation 
	feature.</p>
	<p><img alt="" src="images/NLSMethod6.png"/> </p>
	<p>But once the panel is compiled and integrated in your application, it will 
	be completely translated to the right language at runtime:</p>
	<p><img alt="" src="images/NLSMethod7.png"/></p>
	</li>
	<li>
	<p><b>Manage NLS strings in the "User Code" of the Dialog "Implementation view"</b>. 
	If you need to use NLS strings in the "<em>User Code</em>" parts of the generated 
	C++ implementation of the Dialog, you mustn't write non ASCII characters directly 
	in the C++ view. Indeed, the content would not be saved in the right format 
	to support those characters. Moreover, compiler may not support non ASCII C++ 
	file format.</p>
	</li>
	<li>
	<p>Then, the right way to manage NLS strings in the "<em>User Code</em>" is 
	to declare NLS string in CATNls files and to read values in the C++ user code 
	implementation.</p>
	<p>For example, starting from the previous sample, add a new Label2 in the panel:</p>
	<p><img alt="" src="images/NLSMethod8.png"/></p>
	</li>
	<li>
	<p>Then switch to the Implementation View, and go to the Build() method, and 
	insert following lines:</p>
	<pre class="code">// Begin of User Code
_Label2-&gt;SetTitle(CATMsgCatalog::BuildMessage(&quot;CodeGen&quot;, &quot;Question.Title&quot;));
// End of User Code</pre>
	</li>
	<li>
	<p>Go in the include section on the top of the file and insert:</p>
	<pre class="code">// Begin of User Code
#include " CATMsgCatalog.h"
// End of User Code</pre>
	</li>
	<li>
	<p>Edit file <em>CNext/resources/msgcatalog/CodeGen.CATNls</em> and enter:</p>
	<p><kbd>Question.Title = "How are you?";</kbd></p>
	</li>
	<li>
	<p>Edit file <em>CNext/resources/msgcatalog/Japanese/CodeGen.CATNls</em> and 
	enter:</p>
	<p><img alt="" src="images/NLSMethod9.png"/></p>
	</li>
	<li>
	<p>Compile your application, update the workspace run time view, using the "<em>Refresh 
	Runtime View</em>" command from the "<em>Workspace Explorer</em>", and run your 
	application:</p>
	<p><img alt="" src="images/NLSMethod10.png"/></p>
	<p><strong>Note:</strong> if you use the Simulation feature of the Dialog Designer, 
	NLS string managed in the &quot;User Code&quot; are not displayed, since the 
	generated C++ code is not executed in that case.</p>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Jun 2008]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
