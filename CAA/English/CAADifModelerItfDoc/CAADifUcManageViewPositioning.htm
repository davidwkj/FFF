<!DOCTYPE html
          PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta content="en-us" http-equiv="Content-Language" />
    <meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
    <meta name="topictype" content="Uc" />
    <meta name="devlang" content="cpp" />
    <link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
    <script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
    <script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
    <script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
    <title>Managing View Instance Positioning in a Sheet Reference</title>
</head>

<body onload="highlightSearchTerms();">

    <table class="DocHeader">
        <tr>
            <td class="DocHeader1">
                <h1><a name="Top"></a>Managing View Instance Positioning in a Sheet Reference</h1>
            </td>
        </tr>
        <tr>
            <td class="use">Use Case</td>
        </tr>
    </table>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <table class="abstract">
        <tr>
            <td>
                <h2>Abstract</h2>
                <p>
                    This article discusses the CAADifManageViewpositioning  use case. This use case
                    explains how to open a sheet reference and manage the view instances positioning.</p>
                <ul>
                    <li><a href="#Learn">What You Will Learn With This Use Case</a></li>
                    <li>
                        <a href="#UseCase">The CAADifManageViewpositioning  Use Case</a>
                        <ul>
                            <li><a href="#What">What Does CAADifManageViewpositioning  Do</a></li>
                            <li><a href="#How">How to Launch CAADifManageViewpositioning </a></li>
                            <li><a href="#Where">Where to Find the CAADifManageViewpositioning  Code</a></li>
                        </ul>
                    </li>
                    <li><a href="#Step">Step-by-Step</a></li>
                    <li><a href="#InShort">In Short</a></li>
                    <li><a href="#References">References</a></li>
                </ul>
            </td>
        </tr>
    </table>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
    <p>This use case is intended to manage the views instances positioning of a sheet reference. This use case involves the following objects:</p>
    <ul>
        <li>Sheet reference</li>        
        <li>View instance.</li>
    </ul>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <h2><a name="UseCase"></a>The CAADifManageViewpositioning  Use Case</h2>
    <p>
        CAADifManageViewpositioning  is a use case of the CAADifModeler.edu framework that
        illustrates CATDibModelerUseItf and CATDifModelerUseItf frameworks capabilities.
    </p>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <h3><a name="What"></a>What Does CAADifManageViewpositioning  Do</h3>
    <p>The use case will navigate on the opened sheet reference and align on 
	the same X axis all the views in the sheet:</p>
  <table>
	<caption style="width: 482px"><a name="Fig1"></a>Fig. 1 The Sheet Before 
	Running CAADifManageViewpositioning  </caption>
	<tr>
		<td>
		<img alt="The Applicative Reference before 
	Running CAADifStructureCreation" height="375" src="images/CAADifModeler04.jpg" width="527"/></td>
	</tr>
</table>
<table>
	<caption style="width: 479px"><a name="Fig2"></a>Fig. 2 The Sheet After Running CAADifManageViewpositioning.</caption>
	<tr>
		<td>
		<img alt="The Applicative Reference before 
	Running CAADifStructureCreation" height="382" src="images/CAADifModeler05.jpg" width="538"/></td>
	</tr>
</table>    <script type="text/javascript">insertLinkToTop();</script>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <h3><a name="How"></a>How to Launch CAADifManageViewpositioning </h3>
    <p>
        To launch CAADifManageViewpositioning, you will need to set up the build time environment,
        then compile CAADifManageViewpositioning  along with its prerequisites, set up the run time
        environment, and then execute the use case [<a href="#References">1</a>].
    </p>
<pre>mkrun -c &quot;CAADifManageViewpositioning  Repository Server LoginTicket PLMExternalIDValue Version&quot;</pre>
    <p>where the description of the arguments is the following:</p>
    <table class="fill">
        <colgroup align="center" span="1"></colgroup>
        <tr>
            <th>Position</th>
            <th>Description</th>
            <th>Example</th>
            <th>Category</th>
        </tr>
        <tr>
            <td>1</td>
            <td>PLM repository</td>
            <td>PLM1</td>
            <td rowspan="3">Connection</td>
        </tr>
        <tr>
            <td>2</td>
            <td>PLM server</td>
            <td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
        </tr>
        <tr>
            <td>3</td>
            <td>LoginTicket</td>
            <td>The login ticket</td>
        </tr>
        <tr>
            <td>4</td>
            <td>PLMExternalIDValue</td>
            <td>sht-33606995-00000002</td>
            <td rowspan="2">Component Attribute</td>
        </tr>
        <tr>
            <td>5</td>
            <td>Version</td>
            <td>A</td>
        </tr>
    </table>
    <p>
        <strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM
        Reference or PLM Representation Reference. This data is stored in 3D XML files,
        whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database
        using the Add / Import / 3D XML command prior to launching the use case.<br />
        The &quot;3dxml&quot; file is supplied in the the CAADifModeler.edu framework:
    </p>
    <p><code>InstallRootFolder\CAADoc\CAADifModeler.edu\InputData\CAADifManageViewpositioning.3dxml</code></p>
    <p>
        where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder
        where the API CD-ROM is installed.
    </p>
    <p>This &quot;3dxml&quot; contains an applicative reference and some 2D representation datas:</p>
    <ul>
        <li><strong>PLMExternalIDValue</strong> : sht-33606995-00000002</li>
        <li><strong>Version</strong> : A </li>
    </ul>
    <script type="text/javascript">insertLinkToTop();</script>
    <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <!-- article data-xplore-fw='CAADifModeler.edu' data-xplore-mod='CAADifManageViewpositioning .m' -->
        <h3><a name="Where"></a>Where to Find the CAADifManageViewpositioning  Code</h3>
        <p>
            The CAADifManageViewpositioning  use case is made of a single source file named
            CAADifManageViewpositioning.cpp
            located in the CAADifManageViewpositioning.m module of the CAADifModeler.edu framework:
        </p>
        <p><code>InstallRootFolder\CAADoc\CAADifModeler.edu\CAADifManageViewpositioning.m\</code></p>
        <p>
            where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder
            where the API CD-ROM is installed.
        </p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="Step"></a>Step-by-Step</h2>
        <p>There are five steps in CAADifManageViewpositioning :</p>
        <ol>
            <li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
            <li><a href="#Step2">Querying the Sheet Object in Database and Loading It</a></li>
            <li><a href="#Step3">Retrieving the View Instances</a></li>
            <li><a href="#Step4">Managing View Instances Positioning</a></li>
            <li><a href="#Step5">Saving Objects and Closing the PLM Session</a></li>
        </ol>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr = E_FAIL;

  cout &lt;&lt; &quot;CAADifNavigateOnDifPresentation started&quot; &lt;&lt; endl;

  // 1. Creating and Initializing the PLM Environment
  // ====================================================

  // Checks the input arguments
  // =========================
  if (6 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;login_ticket&gt; &lt;PLM External Id Product&gt; &lt;version&gt; &quot;&lt;&lt; endl;
    return hr;
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* login_ticket = iargv[3];
  const char* comp_externalId = iargv[4];
  const char* comp_version = iargv[5]; 

  CATBoolean traceok = TRUE;
  hr = ::CAAAdpCreateSession(repository,server,login_ticket,traceok);

  if (SUCCEEDED(hr))
  {
    cout &lt;&lt; &quot;The Session has been opened&quot; &lt;&lt; endl;
  } 
  else
  {
    cout &lt;&lt; &quot;Failed to create session &amp; connect to input repository&quot; &lt;&lt; endl;
    return hr;
  }
...</pre>
        <p>This section represents the usual sequence for initializing a PLM environment.</p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3>
            <a name="Step2"></a>Querying the Sheet Object in Database and Loading It</h3>
<pre class="code">...
  // 2. Querying the Sheet object in Database and Loading It

  // Entire model is loaded
  CATBoolean ExpandAllMode = TRUE;
  CATOmbLifeCycleRootsBag Bag;

  cout &lt;&lt; &quot;PLM external ID &quot; &lt;&lt; comp_externalId &lt;&lt; endl;
  cout &lt;&lt; &quot;comp_version &quot; &lt;&lt; comp_version &lt;&lt; endl;

  CATIDifSheet_var spSheet;
  {
    CATIDifSheet *piSheet = NULL;
    hr = ::CAAOpenPLMComponent(&quot;DIFSheet&quot;, comp_externalId, comp_version,
    IID_CATIDifSheet, (void **)&amp;piSheet, Bag, ExpandAllMode);

    // Manage life cycle by using smart pointer
    if (NULL != piSheet)
    {
      spSheet = piSheet;
      piSheet-&gt;Release(); piSheet = NULL;
    }
    if (FAILED(hr) || NULL_var == spSheet)
    {
      cout &lt;&lt; &quot;Failure to open the sheet&quot; &lt;&lt; endl;
    }
  }  
...</pre>
        <p>
            This section represents the usual sequence to query a PLM Sheet reference
            in the database and open it.
        </p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step3"></a>Retrieving the View Instances</h3>
<pre class="code">...
  // 3. Retrieve the views instances

  CATListValCATBaseUnknown_var ListViewsInstances;

  CATIDibViewSet_var spViewSet = spSheet;
  if (NULL_var != spViewSet)
  {
    hr = spViewSet-&gt;GetViewInstances(ListViewsInstances);
    if (FAILED(hr))
      cout &lt;&lt; &quot;Cannot retrieve views instances from sheet reference&quot; &lt;&lt; endl;
  }
  else
  {
    cout &lt;&lt; &quot;Cannot get the sheet as view set&quot; &lt;&lt; endl;
    hr = E_FAIL;
  }
...</pre>

        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step4"></a>Managing View Instances Positioning</h3>
<pre class="code">...
  // 4. Manage views instances positioning
  if (ListViewsInstances.Size() &gt;= 3)
  {
    double x = 0., y = 0.;
    CATIDibViewMakeUp_var hViewMakeUp = ListViewsInstances[1];
    if (NULL_var != hViewMakeUp)
    {
      // Get the X coordinate of the first view and align the other views on it
      hr = hViewMakeUp-&gt;GetPosition(x,y);
      if (FAILED(hr))
      {
       cout &lt;&lt; &quot;Failed to retrieve&quot; &lt;&lt; endl;
      }
    }

    for (int indice = 2; indice &lt;= ListViewsInstances.Size(); indice++)
    {
      cout &lt;&lt; &quot;lstViewInstances (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; ListViewsInstances[indice]-&gt;GetImpl() &lt;&lt; endl;
      CATIDibViewMakeUp_var hViewMakeUpTarget = ListViewsInstances[indice];
      if (NULL_var != hViewMakeUpTarget)
      {
        double xTargetedView = 0., yTargetedView = 0.;
        hr = hViewMakeUpTarget-&gt;GetPosition(xTargetedView, yTargetedView);
        if (FAILED(hr))
        {
           cout &lt;&lt; &quot;Failed to get the targeted view position&quot; &lt;&lt; endl;
          continue;
        }
        hr = hViewMakeUpTarget-&gt;SetPosition(x, yTargetedView);
        if (FAILED(hr))
        {
          cout &lt;&lt; &quot;Failed to set the targeted view position&quot; &lt;&lt; endl;
          continue;
        }
      }
    }
  }
...</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step5"></a>Saving Objects and Closing the PLM Session</h3>
<pre class="code">...

  // 5. Save objects and close the PLM session
  CATAdpSaver saver;

  // Save all modified components
  if (FAILED(saver.Save()))
  {
    cout &lt;&lt; &quot;ERROR saving PLM Data&quot; &lt;&lt; endl;
    hr = E_FAIL;
  }
  else
    cout &lt;&lt; &quot;PLM Data saved&quot; &lt;&lt; endl;

  //Bag Emptying Operation 
  //==========================
  if (SUCCEEDED(Bag.RemoveAll()))
    cout &lt;&lt; &quot;Empties the Bag&quot; &lt;&lt; endl;
  else
  {
    hr = E_FAIL;
    cout &lt;&lt; &quot;Error During Empties the Bag&quot; &lt;&lt; endl;
  }

  // Close the PLM session
  //=========================
  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;ERROR closing PLM session&quot; &lt;&lt; endl;
  }
  else
    cout &lt;&lt; &quot;PLM session closed&quot; &lt;&lt; endl;

  cout &lt;&lt; &quot;CAADifNavigateOnDifPresentation ended&quot; &lt;&lt; endl;

  return hr;
}
...</pre>
        <script type="text/javascript">insertLinkToTop();</script>
		<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="InShort"></a>In Short</h2>
		<p>This use case allows you to open a sheet and manage the view instances positioning.</p>

        <script type="text/javascript">insertLinkToTop();</script>

        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="References"></a>References</h2>
        <div id="ref">
            <table class="reference">
                <tr>
                    <td>[1]</td>
                    <td>
                        <a href="../CAADocUseCases/CAADocRunSample.htm">
                            Building and Launching a Use Case
                        </a>
                    </td>
                </tr>
            </table>
        </div>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="History"></a>History</h2>
        <table class="history">
            <tr>
                <td>Version: <strong>1</strong> [Feb 2018]</td>
                <td>Document created</td>
            </tr>
        </table>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <script type="text/javascript">insertCopyright();</script>

    </article>

</body>

</html>
