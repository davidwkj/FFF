<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Navigating on the 2D Components of a View or a Sheet reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Navigating on the 2D Components of a View or a Sheet reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADifSymbol2DComponentNavigation use case. This use 
		case explains how to retrieve the 2D components of a view or a sheet reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADifSymbol2DComponentNavigation Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADifSymbol2DComponentNavigation Do</a></li>
					<li><a href="#How">How to Launch CAADifSymbol2DComponentNavigation</a></li>
					<li><a href="#Where">Where to Find the CAADifSymbol2DComponentNavigation Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to retrieve the 2D components of a view or a sheet 
reference. The following objects are involved:</p>
<ul>
	<li>Sheet</li>
	<li>View</li>
	<li>Symbol</li>
	<li>Route</li>
	<li>Symbol on route.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADifSymbol2DComponentNavigation Use Case</h2>
<p>CAADifSymbol2DComponentNavigation is a use case of the CAADifSymbolModeler.edu framework that 
illustrates CATDifSymbolModelerUseItf frameworks capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADifSymbol2DComponentNavigation Do</h3>
<p>The use case perform a navigation on the 2D components and dump the 
navigation result in the standard output stream.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADifSymbol2DComponentNavigation</h3>
<p>To launch CAADifSymbol2DComponentNavigation, you will need to set up the build time environment, 
then compile CAADifSymbol2DComponentNavigation along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADifSymbol2DComponentNavigation Repository Server LoginTicket PLMExternalIDValue Version&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="3">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number </em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>LoginTicket</td>
		<td>The login ticket</td>
	</tr>
	<tr>
		<td>4</td>
		<td>PLMExternalIDValue</td>
		<td>sht-72616016-00000001</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Version</td>
		<td>A</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the Add / Import / 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADifSymbolModeler.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADifSymbolModeler.edu\InputData\CAADifSymbolModelerUseCaseDatas.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This &quot;3dxml&quot; contains an applicative reference and some 2D presentation datas:</p>
<ul>
	<li><strong>PLMExternalIDValue</strong> : sht-72616016-00000001</li>
	<li><strong>Version</strong> : A </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<article data-xplore-fw='CAADifSymbolModeler.edu' data-xplore-mod='CAADifSymbol2DComponentNavigation.m'>
<h3><a name="Where"></a>Where to Find the CAADifSymbol2DComponentNavigation Code</h3>
<p>The CAADifSymbol2DComponentNavigation use case is made of a single source file named 
CAADifSymbol2DComponentNavigation.cpp 
located in the CAADifSymbol2DComponentNavigation.m module of the CAADifSymbolModeler.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADifSymbolModeler.edu\CAADifSymbol2DComponentNavigation.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are eleven steps in CAADifSymbol2DComponentNavigation:</p>
<ol>
	<li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
	<li><a href="#Step2">Querying the Sheet Object in Database and Loading It</a></li>
	<li><a href="#Step3">Navigating on the Sheet Shapes and Annotations</a></li>
	<li><a href="#Step4">Retrieving Targeted Views</a></li>
	<li><a href="#Step5">Retrieving Routes</a></li>
	<li><a href="#Step6">Retrieving the Route Points</a></li>
    <li><a href="#Step7">Retrieving Symbols on Routes</a></li>
    <li><a href="#Step8">Retrieving Symbols</a></li>
	<li><a href="#Step9">Retrieving Shapes</a></li>
	<li><a href="#Step10">Retrieving Annotations</a></li>
    <li><a href="#Step11">Closing the PLM Session</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code">int main(int iargc, char *iargv[])
{
  HRESULT hr = E_FAIL;
  cout &lt;&lt; &quot;CAADifSymbol2DComponentNavigation started&quot; &lt;&lt; endl;

  // 1. Creating and Initializing the PLM Environment
  // ====================================================

  // Checks the input arguments
  // =========================
  if (6 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;login_ticket&gt; &lt;PLM External Id Product&gt; &lt;version&gt; &quot;&lt;&lt; endl;
    return 1; 
  }
  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* login_ticket = iargv[3];
  const char* comp_externalId = iargv[4];
  const char* comp_version = iargv[5]; 

  CATBoolean traceok = TRUE;
  hr = ::CAAAdpCreateSession(repository,server,login_ticket,traceok);

  if (SUCCEEDED(hr))
  {
    cout &lt;&lt; &quot;The Session has been opened&quot; &lt;&lt; endl;
  } 
  else
  {
    cout &lt;&lt; &quot;Failed to create session &amp; connect to input repository&quot; &lt;&lt; endl;
    return hr;
  }
  
...</pre>
<p>This section represents the usual sequence for initializing a PLM environment.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Querying the Sheet Object in Database and Loading It</h3>
<pre class="code">...
  // 2. Querying the sheet object in Database and Loading It

  // Entire model is loaded
  CATBoolean ExpandAllMode = TRUE;
  CATOmbLifeCycleRootsBag Bag;

  cout &lt;&lt; &quot;PLM external ID &quot; &lt;&lt; comp_externalId &lt;&lt; endl;
  cout &lt;&lt; &quot;comp_version &quot; &lt;&lt; comp_version &lt;&lt; endl;

  CATIDifSheet_var spSheet;
  {
    CATIDifSheet *piSheet = NULL;
    hr = ::CAAOpenPLMComponent(&quot;DIFSheet&quot;, comp_externalId, comp_version,
    IID_CATIDifSheet, (void **)&amp;piSheet, Bag, ExpandAllMode);

    // Manage life cycle by using smart pointer
    if (NULL != piSheet)
    {
      spSheet = piSheet;
      piSheet-&gt;Release(); piSheet = NULL;
    }

    if (FAILED(hr) || NULL_var == spSheet)
    {
      cout &lt;&lt; &quot;Failure to open the sheet &quot; &lt;&lt; endl;
    }
  }
...</pre>
<p>This section represents the usual sequence to query a representation reference 
in the database and open it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Navigating on Sheet Shapes and Annotations</h3>
<pre class="code">...
  // 3. Navigate on sheet Shapes and Annotation
  { // Forcing the scope

    // Retrieve Annotations
    CATIDibAnnotationSet_var spAnnotationSet = spSheet;
    if (NULL_var != spAnnotationSet)
    {
      CATListValCATBaseUnknown_var ListAnnotations;
      hr = spAnnotationSet-&gt;GetAnnotations(ListAnnotations);
      for (int indice = 1; indice &lt;= ListAnnotations.Size(); indice++)
      {
        CATBaseUnknown_var spAnnotation = ListAnnotations[indice];
        if (NULL_var != spAnnotation)
          cout &lt;&lt; &quot;lstAnnotations (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spAnnotation-&gt;GetImpl() &lt;&lt; endl;
      }
    }

    // Retrieve Shapes
    CATIDifUseShapeSet_var spShapeSet = spSheet;
    if (NULL_var != spShapeSet)
    {
      CATListValCATBaseUnknown_var ListShapes;
      hr = spShapeSet-&gt;Get2DShapes(ListShapes);
      for (int indice = 1; indice &lt;= ListShapes.Size(); indice++)
      {
        CATBaseUnknown_var spShape = ListShapes[indice];
        if (NULL_var != spShape)
          cout &lt;&lt; &quot;lstShapes (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spShape-&gt;GetImpl() &lt;&lt; endl;
      }
    }
  }
...</pre>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Retrieving Targeted Views</h3>
<pre class="code">...
  // 4. Retrieving the targeted view
  CATListValCATBaseUnknown_var ListViewsInstances;

  CATIDibViewSet_var spViewSet = spSheet;
  if (NULL_var != spViewSet)
  {
    hr = spViewSet-&gt;GetViewInstances(ListViewsInstances);
    if (FAILED(hr))
      cout &lt;&lt; &quot;Cannot retrieve views instances from sheet reference&quot; &lt;&lt; endl;
  }
  else
  {
    cout &lt;&lt; &quot;Cannot get the sheet as view set&quot; &lt;&lt; endl;
    hr = E_FAIL;
  }

  for (int indice = 1; indice &lt;= ListViewsInstances.Size(); indice++)
  {
    cout &lt;&lt; &quot;lstViewInstances (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; ListViewsInstances[indice]-&gt;GetImpl() &lt;&lt; endl;
    CATIDibViewInstance_var spViewInstance = ListViewsInstances[indice];
    if (NULL_var != spViewInstance)
    {
      // Get the view reference
      CATBaseUnknown_var spViewRef;
      hr = spViewInstance-&gt;GetViewReference(spViewRef);
      if (SUCCEEDED(hr) &amp;&amp; NULL_var != spViewRef)
      {
...</pre>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Retrieving Routes</h3>
<pre class="code">...
  // 5. Retrieving the routes
  CATIDifUseRouteSet_var spRouteSet = spViewRef;
  if (NULL_var != spRouteSet)
  {
    CATListValCATBaseUnknown_var ListRoutes;
    hr = spRouteSet-&gt;GetRoutes(ListRoutes);
    for (int indice = 1; indice &lt;= ListRoutes.Size(); indice++)
    {
      CATIDifUseRoute_var spRoute = ListRoutes[indice];
      if (NULL_var != spRoute)
      {
        cout &lt;&lt; &quot;lstRoutes (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spRoute-&gt;GetImpl() &lt;&lt; endl;

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a> Retrieving the Route Points</h3>
<pre class="code">...
         // 6. Retrieving the route points
         CATListValCATMathPoint2D lRoutePoints;
         hr = spRoute-&gt;GetRouteDescription(lRoutePoints);
         if (S_OK == hr &amp;&amp; lRoutePoints.Size() &gt; 0)
         {
           for (int indexPoint = 1; indexPoint &lt;= lRoutePoints.Size(); ++indexPoint)
           {
             CATMathPoint2D point = lRoutePoints[indexPoint];
             cout &lt;&lt; "Point x:" &lt;&lt; point.GetX() &lt;&lt; "," &lt;&lt; point.GetY() &lt;&lt; endl;
           }
         }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Retrieving Symbols on Routes</h3>
<pre class="code">...
        // 7. Retrieving the symbols on routes
        CATListValCATBaseUnknown_var ListSymbolOnRoutes;
        hr = spRoute-&gt;GetSymbolsOnRoute(ListSymbolOnRoutes);
        for (int indice = 1; indice &lt;= ListSymbolOnRoutes.Size(); indice++)
        {
          CATBaseUnknown_var spSymbolOnRoute = ListSymbolOnRoutes[indice];
          if (NULL_var != spSymbolOnRoute)
          cout &lt;&lt; &quot;lstSymbolOnRoutes (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spSymbolOnRoute-&gt;GetImpl() &lt;&lt; endl;
        } 
      }
    }
  }


...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Retrieving Symbols</h3>
<pre class="code">...

  // 8. Retrieving the symbols
  CATIDibSymbolSet_var spSymbolSet = spViewRef;
  if (NULL_var != spSymbolSet)
  {
    CATListValCATBaseUnknown_var ListSymbols;
    hr = spSymbolSet-&gt;GetSymbols(ListSymbols);
    for (int indice = 1; indice &lt;= ListSymbols.Size(); indice++)
    {
      CATBaseUnknown_var spSymbol = ListSymbols[indice];
      if (NULL_var != spSymbol)
        cout &lt;&lt; &quot;lstSymbols (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spSymbol-&gt;GetImpl() &lt;&lt; endl;
    }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step9"></a>Retrieving Shapes</h3>
<pre class="code">...
  // 9. Retrieving the shapes
  CATIDifUseShapeSet_var spShapeSet = spViewRef;
  if (NULL_var != spShapeSet)
  {
    CATListValCATBaseUnknown_var ListShapes;
    hr = spShapeSet-&gt;Get2DShapes(ListShapes);
    for (int indice = 1; indice &lt;= ListShapes.Size(); indice++)
    {
      CATBaseUnknown_var spShapes = ListShapes[indice];
      if (NULL_var != spShapes)
      cout &lt;&lt; &quot;lstShapes (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spShapes-&gt;GetImpl() &lt;&lt; endl;
    }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step10"></a>Retrieving Annotations</h3>
<pre class="code">...
  // 10. Retrieving the annotations
  CATIDibAnnotationSet_var spAnnotationSet = spViewRef;
  if (NULL_var != spAnnotationSet)
  {
    CATListValCATBaseUnknown_var ListAnnotations;
    hr = spAnnotationSet-&gt;GetAnnotations(ListAnnotations);
    for (int indice = 1; indice &lt;= ListAnnotations.Size(); indice++)
    {
      CATBaseUnknown_var spAnnotation = ListAnnotations[indice];
      if (NULL_var != spAnnotation)
        cout &lt;&lt; &quot;lstAnnotations (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; spAnnotation-&gt;GetImpl() &lt;&lt; endl;
    }
  }
...</pre>
<script type="text/javascript">insertLinkToTop();</script>

<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step11"></a>Closing the PLM Session</h3>
<pre class="code">...

  // 11. Closing the PLM Session
  //Bag Emptying Operation 
  //==========================
  if (SUCCEEDED(Bag.RemoveAll()))
    cout &lt;&lt; &quot;Empties the Bag&quot; &lt;&lt; endl;
  else
  {
    hr = E_FAIL;
    cout &lt;&lt; &quot;Error During Empties the Bag&quot; &lt;&lt; endl;
  }
  // Close the PLM session
  //=========================
  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;ERROR closing PLM session&quot; &lt;&lt; endl;
  }
  else
    cout &lt;&lt; &quot;PLM session closed&quot; &lt;&lt; endl;

  cout &lt;&lt; &quot;CAADifSymbol2DComponentNavigation ended&quot; &lt;&lt; endl;

  return hr;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="InShort"></a>In Short</h2>
		<p>This use case allows you to open a sheet and retrieves the 2D components in the sheet and the views.</p>

        <script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<div id="ref">
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
</div>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2018]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
