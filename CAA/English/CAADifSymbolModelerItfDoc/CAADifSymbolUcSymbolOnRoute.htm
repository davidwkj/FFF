<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<meta name="topictype" content="Uc" />
<meta name="devlang" content="cpp" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating and Managing a Symbol on Route</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating and Managing a Symbol on Route</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAADifSymbolDifSymbolOnRoute use case. This use 
		case explains how to create and manage a symbol on route on a route.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAADifSymbolDifSymbolOnRoute Use Case</a>
				<ul>
					<li><a href="#What">What Does CAADifSymbolDifSymbolOnRoute Do</a></li>
					<li><a href="#How">How to Launch CAADifSymbolDifSymbolOnRoute</a></li>
					<li><a href="#Where">Where to Find the CAADifSymbolDifSymbolOnRoute Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>This use case is intended to retrieve a route, create a symbol on route and manage it. This use case 
involves the following objects:</p>
<ul>
	<li>Sheet</li>
	<li>View Instance</li>
	<li>View Reference</li>
    <li>Route</li>
    <li>Symbol On Route.</li>
</ul>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAADifSymbolDifSymbolOnRoute Use Case</h2>
<p>CAADifSymbolDifSymbolOnRoute is a use case of the CAADifSymbolModeler.edu framework that 
illustrates CATDibModelerUseItf, CATDifModelerUseItf and 
CATDifSymbolModelerUseItf frameworks capabilities.</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAADifSymbolDifSymbolOnRoute Do</h3>
<p>The use case creates a symbol on route with text on an existing route.</p>
<table>
	<caption style="width: 482px"><a name="Fig1"></a>Fig. 1 The Sheet before 
	CAADifSymbolDifSymbolOnRoute processing.</caption>
	<tr>
		<td>
		<img alt="The Applicative Reference before 
	Running CAADifStructureCreation" height="381" src="images/CAADifSymbolModeler04.jpg" width="659"/></td>
	</tr>
</table>
<table>
	<caption style="width: 479px"><a name="Fig2"></a>Fig. 2 The Sheet after 
	CAADifSymbolDifSymbolOnRoute processing.</caption>
	<tr>
		<td>
		<img alt="The Applicative Reference before 
	Running CAADifStructureCreation" height="422" src="images/CAADifSymbolModeler05.jpg" width="658"/></td>
	</tr>
</table>

<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAADifSymbolDifSymbolOnRoute</h3>
<p>To launch CAADifSymbolDifSymbolOnRoute, you will need to set up the build time environment, 
then compile CAADifSymbolDifSymbolOnRoute along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<pre>mkrun -c &quot;CAADifSymbolDifSymbolOnRoute Repository Server LoginTicket PLMExternalIDValue Version&quot;</pre>
<p>where the description of the arguments is the following:</p>
<table class="fill">
	<colgroup align="center" span="1">
	</colgroup>
	<tr>
		<th>Position</th>
		<th>Description</th>
		<th>Example</th>
		<th>Category</th>
	</tr>
	<tr>
		<td>1</td>
		<td>PLM repository</td>
		<td>PLM1</td>
		<td rowspan="3">Connection</td>
	</tr>
	<tr>
		<td>2</td>
		<td>PLM server</td>
		<td>The name and port of the server as <em>name</em>:<em>port_number</em></td>
	</tr>
	<tr>
		<td>3</td>
		<td>LoginTicket</td>
		<td>The login ticket</td>
	</tr>
	<tr>
		<td>4</td>
		<td>PLMExternalIDValue</td>
		<td>...</td>
		<td rowspan="2">Component Attribute</td>
	</tr>
	<tr>
		<td>5</td>
		<td>Version</td>
		<td>A</td>
	</tr>
</table>
<p><strong>Import PLM Data:</strong> The use case may require input PLM Data: PLM 
Reference or PLM Representation Reference. This data is stored in 3D XML files, 
whose extension is &quot;3dxml&quot;. You must import these PLM Data in the database 
using the Add / Import / 3D XML command prior to launching the use case.<br />
The &quot;3dxml&quot; file is supplied in the the CAADifSymbolModeler.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAADifSymbolModeler.edu\InputData\CAADibNavigationAndCreation.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This &quot;3dxml&quot; contains an applicative reference and some 2D representation datas:</p>
<ul>
	<li><strong>PLMExternalIDValue</strong> : ...</li>
	<li><strong>Version</strong> : A </li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
    <!-- article data-xplore-fw='CAADifSymbolModeler.edu' data-xplore-mod='CAADifSymbolDifSymbolOnRoute.m' -->
        <h3><a name="Where"></a>Where to Find the CAADifSymbolDifSymbolOnRoute Code</h3>
        <p>
            The CAADifSymbolDifSymbolOnRoute use case is made of a single source file named
            CAADifSymbolDifSymbolOnRoute.cpp
            located in the CAADifSymbolDifSymbolOnRoute.m module of the CAADifSymbolModeler.edu framework:
        </p>
        <p><code>InstallRootFolder\CAADoc\CAADifSymbolModeler.edu\CAADifSymbolDifSymbolOnRoute.m\</code></p>
        <p>
            where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder
            where the API CD-ROM is installed.
        </p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h2><a name="Step"></a>Step-by-Step</h2>
        <p>There are seven steps in CAADifSymbolDifSymbolOnRoute:</p>
        <ol>
            <li><a href="#Step1">Creating and Initializing the PLM Environment</a></li>
            <li><a href="#Step2">Opening the Sheet Reference</a></li>
            <li><a href="#Step3">Retrieving the View Reference</a></li>
            <li><a href="#Step4">Retrieving the Route</a></li>
            <li><a href="#Step5">Creating a Symbol on Route</a></li>
            <li><a href="#Step6">Managing a Symbol on Route</a></li>
            <li><a href="#Step7">Saving the Newly Created Objects and Closing the PLM Session</a></li>
        </ol>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step1"></a>Creating and Initializing the PLM Environment</h3>
<pre class="code"> int main(int iargc, char *iargv[])
{
  HRESULT hr = E_FAIL;

  cout &lt;&lt; &quot;CAADifNavigateOnDifPresentation started&quot; &lt;&lt; endl;// 1. Creating and Initializing the PLM Environment
  // ====================================================

  // Checks the input arguments
  // =========================
  if (6 != iargc) {
    cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; iargv[0] &lt;&lt; &quot; &lt;repository&gt; &lt;server&gt; &lt;login_ticket&gt; &lt;PLM External Id Product&gt; &lt;version&gt; &quot;&lt;&lt; endl;
    return hr;
  }

  const char* repository = iargv[1];
  const char* server = iargv[2];
  const char* login_ticket = iargv[3];
  const char* comp_externalId = iargv[4];
  const char* comp_version = iargv[5]; 

  CATBoolean traceok = TRUE;
  hr = ::CAAAdpCreateSession(repository,server,login_ticket,traceok);

  if (SUCCEEDED(hr))
  {
    cout &lt;&lt; &quot;The Session has been opened&quot; &lt;&lt; endl;
  } 
  else
  {
    cout &lt;&lt; &quot;Failed to create session &amp; connect to input repository&quot; &lt;&lt; endl;
    return hr;
  }

...</pre>
        <p>This section represents the usual sequence for initializing a PLM environment.</p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step2"></a>Opening the Sheet Reference</h3>
<pre class="code">...

  // 2. Opening the sheet reference

  // Entire model is loaded
  CATBoolean ExpandAllMode = TRUE;
  CATOmbLifeCycleRootsBag Bag;

  cout &lt;&lt; &quot;PLM external ID &quot; &lt;&lt; comp_externalId &lt;&lt; endl;
  cout &lt;&lt; &quot;comp_version &quot; &lt;&lt; comp_version &lt;&lt; endl;

  CATIDifSheet_var spSheet;
  {
    CATIDifSheet *piSheet = NULL;
    hr = ::CAAOpenPLMComponent(&quot;DIFSheet&quot;, comp_externalId, comp_version,
    IID_CATIDifSheet, (void **)&amp;piSheet, Bag, ExpandAllMode);

    // Manage life cycle by using smart pointer
    if (NULL != piSheet)
    {
      spSheet = piSheet;
      piSheet-&gt;Release(); piSheet = NULL;
    }

    if (FAILED(hr) || NULL_var == spSheet)
    {
      cout &lt;&lt; &quot;Failure to open the sheet &quot; &lt;&lt; endl;
    }
  }

...</pre>
        <p>
            This section represents the usual sequence to query a representation reference
            in the database and open it.
        </p>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step3"></a>Retrieving the View Reference</h3>
<pre class="code">...

  // 3. Retrieve the View Reference
  CATListValCATBaseUnknown_var ListViewsInstances;

  CATIDibViewSet_var spViewSet = spSheet;
  if (NULL_var != spViewSet)
  {
    hr = spViewSet-&gt;GetViewInstances(ListViewsInstances);
    if (FAILED(hr))
      cout &lt;&lt; &quot;Cannot retrieve views instances from sheet reference&quot; &lt;&lt; endl;
  }
  else
  {
    cout &lt;&lt; &quot;Cannot get the sheet as view set&quot; &lt;&lt; endl;
    hr = E_FAIL;
  }


  for (int indice = 1; indice &lt;= ListViewsInstances.Size(); indice++)
  {
    cout &lt;&lt; &quot;lstViewInstances (&quot; &lt;&lt; indice &lt;&lt; &quot;) = &quot; &lt;&lt; ListViewsInstances[indice]-&gt;GetImpl() &lt;&lt; endl;
    CATIDibViewInstance_var spViewInstance = ListViewsInstances[indice];
    if (NULL_var != spViewInstance)
    {
      // Get the view reference
      CATBaseUnknown_var spViewRef;
      hr = spViewInstance-&gt;GetViewReference(spViewRef);
      if (SUCCEEDED(hr) &amp;&amp; NULL_var != spViewRef)
      {

...</pre>

        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step4"></a>Retrieving the Route</h3>
<pre class="code">...

  // 4. Retrieve the route
  CATIDifUseRouteSet_var spRouteSet = spViewRef;
  if (NULL_var != spRouteSet)
  {
    CATListValCATBaseUnknown_var ListRoutes;
    hr = spRouteSet-&gt;GetRoutes(ListRoutes);
    if (ListRoutes.Size() &gt; 0)
    {
      CATIDifUseRoute_var spRoute = ListRoutes[1];
      if (NULL_var != spRoute)
      {

...</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step5"></a>Creating a Symbol on Route</h3>
<pre class="code">...

  // 5. Create a symbol on route
  CATIDifUseSymbolOnRouteFactory_var spSymbolOnRouteFactory = spRoute;
  if (NULL_var != spSymbolOnRouteFactory)
  {
    CATIDifUseSymbolOnRoute::CATDifUseRoutePositionMode RoutePositionMode = CATIDifUseSymbolOnRoute::CATDifUseRoutePositionMode::FIRSTSEGMENT;
    CATIDifUseSymbolOnRoute::CATDifUseSegmentPositionMode SegmentPositionMode = CATIDifUseSymbolOnRoute::CATDifUseSegmentPositionMode::MiddleOfSegment;

    CATIDifUseSymbolOnRoute_var spSymbolOnRoute = spSymbolOnRouteFactory-&gt;CreateSymbolOnRoute(RoutePositionMode,
                                                                                            SegmentPositionMode,
                                                                                            0,
                                                                                            3);
  
...</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step6"></a>Managing a Symbol on Route</h3>
<pre class="code">...

    // 6. Manage a symbol on route
    if (NULL_var != spSymbolOnRoute)
    {
      // Create a text on the symbol on route
      CATIDftBaseAnnotationFactory_var spAnnTextFactory = spSymbolOnRoute;
      if (NULL_var != spAnnTextFactory)
      {
        CATIDftText_var spText;
        spAnnTextFactory-&gt;CreateText(CATMathPoint2D(0.,0.), spText);
        if (NULL_var != spText)
        {
          hr = spText-&gt;SetString("Test Text");
          if (FAILED(hr))
            cout &lt;&lt; "Cannot set the text content" &lt;&lt; endl;
        }
        else
          cout &lt;&lt; "Cannot Create the text under the symbol on route" &lt;&lt; endl;
      }
      else
        cout &lt;&lt; "Cannot Get the Annotation factory on the symbol on route" &lt;&lt; endl;  // Change the route position mode of the segment
                    
      CATIDifUseSymbolOnRoute::CATDifUseRoutePositionMode RoutePositionMode2 = CATIDifUseSymbolOnRoute::CATDifUseRoutePositionMode::LASTSEGMENT;
      hr = spSymbolOnRoute-&gt;GetRoutePositionMode(RoutePositionMode2);
      if (FAILED(hr))
        cout &lt;&lt; &quot;Cannot change the route position mode&quot; &lt;&lt; endl;

      // Change the segment position mode of the symbol on route
      CATIDifUseSymbolOnRoute::CATDifUseSegmentPositionMode SegmentPositionMode2 = CATIDifUseSymbolOnRoute::CATDifUseSegmentPositionMode::EndOfSegment;
      hr = spSymbolOnRoute-&gt;SetSegmentPositionMode(SegmentPositionMode2);
      if (FAILED(hr))
        cout &lt;&lt; &quot;Cannot change the segment position mode&quot; &lt;&lt; endl;
      
    }
    else
      cout &lt;&lt; "Unable to create the symbol on route" &lt;&lt; endl;
  }
  else
    cout &lt;&lt; "Unable to retrieve the symbol on route factory" &lt;&lt; endl;

...</pre>
        <script type="text/javascript">insertLinkToTop();</script>
        <!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
        <h3><a name="Step7"></a>Saving the Newly Created Objects and Closing the PLM Session</h3>
<pre class="code">...

  // 7. Saving the newly created objects and Closing the PLM Session
  CATAdpSaver saver;

  // Save all modified components
  if (FAILED(saver.Save()))
  {
    cout &lt;&lt; &quot;ERROR saving PLM Data&quot; &lt;&lt; endl;
    hr = E_FAIL;
  }
  else
    cout &lt;&lt; &quot;PLM Data saved&quot; &lt;&lt; endl;

  //Bag Emptying Operation 
  //==========================
  if (SUCCEEDED(Bag.RemoveAll()))
    cout &lt;&lt; &quot;Empties the Bag&quot; &lt;&lt; endl;
  else
  {
    hr = E_FAIL;
    cout &lt;&lt; &quot;Error During Empties the Bag&quot; &lt;&lt; endl;
  }
  // Close the PLM session
  //=========================
  hr = ::CAAAdpCloseSession();
  if (FAILED(hr)) 
  {
    cout &lt;&lt; &quot;ERROR closing PLM session&quot; &lt;&lt; endl;
  }
  else
    cout &lt;&lt; &quot;PLM session closed&quot; &lt;&lt; endl;

  cout &lt;&lt; &quot;CAADifNavigateOnDifPresentation ended&quot; &lt;&lt; endl;

  return hr;
}

...</pre>
<script type="text/javascript">insertLinkToTop();</script>      
<h2><a name="InShort"></a>In Short</h2>
<p>This use case is dedicated to create and manage a symbol on route.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!--  /article -->
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<div id="ref">
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
</div>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Feb 2018]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
